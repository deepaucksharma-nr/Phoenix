#!/bin/bash
# compliance-checker.sh - Automate compliance checks for Phoenix Platform
# Created by Abhinav as part of Security & Compliance task

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
REPO_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
REPORT_DIR="$REPO_ROOT/docs/compliance"

# Ensure reports directory exists
mkdir -p "$REPORT_DIR"

# Get current date for reports
current_date=$(date +"%Y-%m-%d")
report_file="$REPORT_DIR/compliance-report-$current_date.md"

# Initialize report file
initialize_report() {
  cat > "$report_file" << EOF
# Phoenix Platform Compliance Report

**Date:** $(date +"%Y-%m-%d %H:%M:%S")
**Generated by:** $(whoami)

This report checks compliance against security best practices, industry standards, and internal policies.

## Summary

| Check Category | Status | Findings |
|---------------|--------|----------|
EOF
}

# Add a result to the report
add_result() {
  local category=$1
  local status=$2
  local findings=$3
  
  echo "| $category | $status | $findings |" >> "$report_file"
}

# Add section details to the report
add_section() {
  local title=$1
  local content=$2
  
  echo -e "\n## $title\n" >> "$report_file"
  echo -e "$content\n" >> "$report_file"
}

# Check for security headers in API configurations
check_security_headers() {
  echo -e "${BLUE}Checking security headers...${NC}"
  
  local issues=0
  local details=""
  
  # Check NGINX configs
  for config in $(find "$REPO_ROOT" -name "*.conf" -type f); do
    if grep -q "server {" "$config"; then
      # Check for required security headers
      if ! grep -q "X-Content-Type-Options" "$config"; then
        details+="- Missing X-Content-Type-Options header in $config\n"
        ((issues++))
      fi
      
      if ! grep -q "X-Frame-Options" "$config"; then
        details+="- Missing X-Frame-Options header in $config\n"
        ((issues++))
      fi
      
      if ! grep -q "Content-Security-Policy" "$config"; then
        details+="- Missing Content-Security-Policy header in $config\n"
        ((issues++))
      fi
    fi
  done
  
  # Check for API Gateway configs with appropriate headers
  for yaml in $(find "$REPO_ROOT" -name "*.yaml" -o -name "*.yml" -type f); do
    if grep -q "apiVersion:" "$yaml" && grep -q "kind:" "$yaml"; then
      if grep -q "Ingress" "$yaml" && ! grep -q "nginx.ingress.kubernetes.io/configuration-snippet" "$yaml"; then
        details+="- Missing security header configuration in Kubernetes Ingress: $yaml\n"
        ((issues++))
      fi
    fi
  done
  
  if [ $issues -eq 0 ]; then
    echo -e "${GREEN}No security header issues found${NC}"
    add_result "Security Headers" "✅ PASS" "All required headers present"
    add_section "Security Headers" "All required security headers are properly configured."
  else
    echo -e "${RED}Found $issues security header issues${NC}"
    add_result "Security Headers" "❌ FAIL" "$issues findings"
    add_section "Security Headers" "The following security header issues were found:\n\n$details\n\nRecommendation: Add missing security headers to all public endpoints."
  fi
}

# Check for proper TLS configurations
check_tls_config() {
  echo -e "${BLUE}Checking TLS configurations...${NC}"
  
  local issues=0
  local details=""
  
  # Check for weak TLS in configs
  for config in $(find "$REPO_ROOT" -name "*.conf" -o -name "*.yaml" -o -name "*.yml" -o -name "*.json" -type f); do
    if grep -q "TLSv1.0" "$config" || grep -q "TLSv1.1" "$config"; then
      details+="- Insecure TLS version found in $config\n"
      ((issues++))
    fi
    
    if grep -q "ssl_ciphers" "$config"; then
      if grep -q "!HIGH" "$config" || grep -q "MEDIUM" "$config" || grep -q "LOW" "$config"; then
        details+="- Weak cipher suite configuration in $config\n"
        ((issues++))
      fi
    fi
  done
  
  # Check Kubernetes ingress TLS settings
  for yaml in $(find "$REPO_ROOT" -name "*.yaml" -o -name "*.yml" -type f); do
    if grep -q "kind: Ingress" "$yaml"; then
      if ! grep -q "tls:" "$yaml"; then
        details+="- Missing TLS configuration in Ingress $yaml\n"
        ((issues++))
      fi
    fi
  done
  
  if [ $issues -eq 0 ]; then
    echo -e "${GREEN}No TLS configuration issues found${NC}"
    add_result "TLS Configuration" "✅ PASS" "All TLS settings secure"
    add_section "TLS Configuration" "TLS configuration is secure across the platform."
  else
    echo -e "${RED}Found $issues TLS configuration issues${NC}"
    add_result "TLS Configuration" "❌ FAIL" "$issues findings"
    add_section "TLS Configuration" "The following TLS issues were found:\n\n$details\n\nRecommendation: Update all TLS configurations to use TLSv1.2+ and strong cipher suites only."
  fi
}

# Check for exposed secrets
check_secrets() {
  echo -e "${BLUE}Checking for exposed secrets...${NC}"
  
  local issues=0
  local details=""
  
  # Run gitleaks (if available)
  if command -v gitleaks &>/dev/null; then
    echo "Running gitleaks scan..."
    gitleaks_output=$(gitleaks detect --no-git --source="$REPO_ROOT" -v --report-format=json || true)
    
    if [ -n "$gitleaks_output" ]; then
      secret_count=$(echo "$gitleaks_output" | grep -c "Finding:")
      details+="- Gitleaks found $secret_count potential secrets\n"
      issues=$((issues + secret_count))
    fi
  else
    # Fallback to basic pattern matching
    echo "Gitleaks not found, using basic pattern matching..."
    
    for file in $(find "$REPO_ROOT" -type f -not -path "*/\.*" -not -path "*/node_modules/*" -not -path "*/vendor/*"); do
      # Skip binary files
      if file "$file" | grep -q "binary"; then
        continue
      fi
      
      # Check for common secret patterns
      if grep -q -E "(password|secret|token|key).*=.{8,}" "$file"; then
        if ! grep -q -E "(password|secret|token|key).*=.*\$\{" "$file"; then
          details+="- Possible hardcoded secret in $file\n"
          ((issues++))
        fi
      fi
      
      # Check for private keys
      if grep -q "PRIVATE KEY" "$file"; then
        details+="- Private key found in $file\n"
        ((issues++))
      fi
    done
  fi
  
  if [ $issues -eq 0 ]; then
    echo -e "${GREEN}No exposed secrets found${NC}"
    add_result "Secret Management" "✅ PASS" "No exposed secrets"
    add_section "Secret Management" "No hard-coded secrets or sensitive data found in the codebase."
  else
    echo -e "${RED}Found $issues potential exposed secrets${NC}"
    add_result "Secret Management" "❌ FAIL" "$issues potential secrets"
    add_section "Secret Management" "The following secret issues were found:\n\n$details\n\nRecommendation: Remove all hardcoded secrets and use proper secret management solutions."
  fi
}

# Check for proper RBAC configuration
check_rbac() {
  echo -e "${BLUE}Checking RBAC configurations...${NC}"
  
  local issues=0
  local details=""
  
  # Check Kubernetes RBAC for overly permissive roles
  for yaml in $(find "$REPO_ROOT" -name "*.yaml" -o -name "*.yml" -type f); do
    if grep -q "kind: Role\|kind: ClusterRole" "$yaml"; then
      if grep -q "\"*\"" "$yaml" && grep -q "\"*\"" "$yaml" | grep -q "verbs:"; then
        details+="- Overly permissive role found in $yaml\n"
        ((issues++))
      fi
    fi
  done
  
  # Check for proper role bindings
  for yaml in $(find "$REPO_ROOT" -name "*.yaml" -o -name "*.yml" -type f); do
    if grep -q "kind: RoleBinding\|kind: ClusterRoleBinding" "$yaml"; then
      if grep -q "system:anonymous" "$yaml" || grep -q "system:unauthenticated" "$yaml"; then
        details+="- Insecure role binding found in $yaml\n"
        ((issues++))
      fi
    fi
  done
  
  if [ $issues -eq 0 ]; then
    echo -e "${GREEN}No RBAC issues found${NC}"
    add_result "Access Controls" "✅ PASS" "RBAC properly configured"
    add_section "Access Controls" "RBAC configurations follow the principle of least privilege."
  else
    echo -e "${RED}Found $issues RBAC issues${NC}"
    add_result "Access Controls" "❌ FAIL" "$issues findings"
    add_section "Access Controls" "The following RBAC issues were found:\n\n$details\n\nRecommendation: Follow the principle of least privilege for all RBAC configurations."
  fi
}

# Check network policies
check_network_policies() {
  echo -e "${BLUE}Checking network policies...${NC}"
  
  local issues=0
  local details=""
  local namespaces=0
  local policies=0
  
  # Count Kubernetes namespaces and network policies
  for yaml in $(find "$REPO_ROOT" -name "*.yaml" -o -name "*.yml" -type f); do
    if grep -q "kind: Namespace" "$yaml"; then
      ((namespaces++))
    fi
    
    if grep -q "kind: NetworkPolicy" "$yaml"; then
      ((policies++))
    fi
  done
  
  # Check if network policies likely cover all namespaces
  if [ $namespaces -gt $policies ] && [ $namespaces -gt 1 ]; then
    details+="- Found $namespaces namespaces but only $policies network policies\n"
    ((issues++))
  fi
  
  # Check for default deny policies
  local default_deny=0
  for yaml in $(find "$REPO_ROOT" -name "*.yaml" -o -name "*.yml" -type f); do
    if grep -q "kind: NetworkPolicy" "$yaml"; then
      if grep -q "podSelector: {}" "$yaml" && ! grep -q "ingress:" "$yaml"; then
        ((default_deny++))
      fi
    fi
  done
  
  if [ $default_deny -eq 0 ] && [ $namespaces -gt 0 ]; then
    details+="- No default deny network policies found\n"
    ((issues++))
  fi
  
  if [ $issues -eq 0 ]; then
    echo -e "${GREEN}Network policies properly configured${NC}"
    add_result "Network Policies" "✅ PASS" "Proper segmentation"
    add_section "Network Policies" "Network policies are properly configured with default deny policies."
  else
    echo -e "${RED}Found $issues network policy issues${NC}"
    add_result "Network Policies" "❌ FAIL" "$issues findings"
    add_section "Network Policies" "The following network policy issues were found:\n\n$details\n\nRecommendation: Implement default-deny network policies for all namespaces and explicitly allow required traffic only."
  fi
}

# Check resource limits
check_resource_limits() {
  echo -e "${BLUE}Checking resource limits...${NC}"
  
  local issues=0
  local details=""
  local total_deployments=0
  local missing_limits=0
  
  # Check Kubernetes deployments for resource limits
  for yaml in $(find "$REPO_ROOT" -name "*.yaml" -o -name "*.yml" -type f); do
    if grep -q "kind: Deployment\|kind: StatefulSet\|kind: DaemonSet" "$yaml"; then
      ((total_deployments++))
      
      if ! grep -A20 "containers:" "$yaml" | grep -q "resources:" || \
         ! grep -A30 "containers:" "$yaml" | grep -q "limits:"; then
        details+="- Missing resource limits in $yaml\n"
        ((missing_limits++))
        ((issues++))
      fi
    fi
  done
  
  if [ $total_deployments -gt 0 ]; then
    local percentage=$((missing_limits * 100 / total_deployments))
    details+="- $percentage% of deployments ($missing_limits of $total_deployments) missing resource limits\n"
  fi
  
  if [ $issues -eq 0 ]; then
    echo -e "${GREEN}Resource limits properly configured${NC}"
    add_result "Resource Management" "✅ PASS" "All resources have limits"
    add_section "Resource Management" "All deployments have properly configured resource requests and limits."
  else
    echo -e "${RED}Found $issues resource limit issues${NC}"
    add_result "Resource Management" "❌ FAIL" "$issues findings"
    add_section "Resource Management" "The following resource limit issues were found:\n\n$details\n\nRecommendation: Define resource requests and limits for all containers to prevent resource exhaustion."
  fi
}

# Generate final report summary
generate_summary() {
  local pass_count=$(grep -c "✅ PASS" "$report_file")
  local fail_count=$(grep -c "❌ FAIL" "$report_file")
  local total=$((pass_count + fail_count))
  local compliance_score=0
  
  if [ $total -gt 0 ]; then
    compliance_score=$((pass_count * 100 / total))
  fi
  
  # Add summary to the beginning of the report
  local temp_file=$(mktemp)
  
  cat > "$temp_file" << EOF
# Phoenix Platform Compliance Report

**Date:** $(date +"%Y-%m-%d %H:%M:%S")
**Generated by:** $(whoami)

This report checks compliance against security best practices, industry standards, and internal policies.

## Compliance Summary

- **Overall Compliance Score:** $compliance_score%
- **Checks Passed:** $pass_count
- **Checks Failed:** $fail_count
- **Total Checks:** $total

EOF
  
  # Append the original report (excluding the header)
  sed '1,7d' "$report_file" >> "$temp_file"
  mv "$temp_file" "$report_file"
  
  # Add recommendations section
  cat >> "$report_file" << EOF

## Next Steps

1. Address all failed compliance checks
2. Prioritize issues based on security impact
3. Schedule a follow-up assessment after implementing fixes
4. Update security policies and documentation as needed

## References

- OWASP Kubernetes Security Cheat Sheet
- CIS Kubernetes Benchmark
- Kubernetes Network Policy Recipes
- Cloud Native Security Best Practices

---

*This is an automated compliance report. For questions, contact the Platform Engineering team.*
EOF
  
  # Print summary to console
  echo -e "\n${BLUE}Compliance Report Summary:${NC}"
  echo -e "Overall Compliance: ${compliance_score}%"
  echo -e "Checks Passed: ${GREEN}${pass_count}${NC}"
  echo -e "Checks Failed: ${RED}${fail_count}${NC}"
  echo -e "Report saved to: $report_file"
}

# Run all checks
run_checks() {
  initialize_report
  
  check_security_headers
  check_tls_config
  check_secrets
  check_rbac
  check_network_policies
  check_resource_limits
  
  generate_summary
}

# Main function
main() {
  echo -e "${BLUE}Running Phoenix Platform compliance checks...${NC}"
  
  run_checks
  
  echo -e "\n${GREEN}Compliance check completed.${NC}"
}

main "$@"
