receivers:
  hostmetrics:
    collection_interval: 30s
    root_path: /host/proc
    scrapers:
      cpu: {}
      memory: {}
      process:
        mute_process_name_error: true
      filesystem: {}
      disk: {}
      load: {}
  
  # Enhanced control signal receiver
  hostmetrics/control:
    collection_interval: 10s
    scrapers:
      load: {} # Minimal scraper just to have something
    
  # Control signal receiver for optimization mode
  prometheus/control_signals:
    config:
      scrape_configs:
        - job_name: 'control-signals'
          scrape_interval: 5s
          static_configs:
            - targets: ['otelcol-observer:9889']
          # This will scrape optimization mode metrics from the observer collector

  # New: Direct file reader for control signals
  filereceiver:
    include: [ "/etc/otelcol/control_signals/opt_mode.yaml" ]
    poll_interval: 5s
    include_file_name_in_body: true

processors:
  # Memory limiter - protects the collector from memory spikes
  memory_limiter:
    check_interval: 5s
    limit_percentage: 90
    spike_limit_percentage: 80

  # General batching
  batch:
    send_batch_size: 1000
    timeout: 10s
    
  # Basic resource detection
  resourcedetection:
    detectors: [env, system]
    timeout: 30s
    system:
      hostname_sources: [os, dns]
  
  # Add custom attributes to all metrics for better context
  attributes:
    actions:
      - key: service.name
        value: "phoenix-observability"
        action: insert
      - key: service.version
        value: "1.0.0"
        action: insert
      - key: deployment.environment
        value: "development"
        action: insert
  
  # NEW: Add pipeline labels to all metrics
  metricstransform/pipeline_labels:
    transforms:
      # Add labels for full pipeline
      - include: ".*"
        match_type: regexp
        action: update
        operations:
          - action: add_label
            new_label: phoenix_pipeline
            new_value: "${PIPELINE_ID}"

  # NEW: Create special phoenix system metrics
  metricstransform/phoenix_system:
    transforms:
      # Create phoenix_system_cpu_time_seconds_total from system.cpu.time
      - include: "system\\.cpu\\.time"
        match_type: regexp
        action: insert
        new_name: "phoenix_system_cpu_time_seconds_total"
        operations:
          - action: aggregate_labels
            aggregation_type: sum
            label_set: ["phoenix_pipeline"]
          - action: add_label
            new_label: collector_source
            new_value: "otelcol-main"
  
  # Pipeline-specific processors
  filter/full_pipeline:
    # Full pipeline passes everything through - no filtering
    metrics:
      include: {}
      
  # Dynamic filter control based on control file mode
  filter/opt_pipeline:
    # Optimized pipeline with enhanced filtering - balance between data reduction and observability
    metrics:
      include:
        match_type: regexp
        metric_names:
          # CPU metrics - essential for performance monitoring
          - "system.cpu.utilization"
          - "system.cpu.load_average.*"
          - "system.cpu.time"
          
          # Memory metrics - critical for resource monitoring
          - "system.memory.usage"
          - "system.memory.utilization"
          
          # Disk metrics - critical for storage monitoring
          - "system.filesystem.utilization"
          - "system.disk.io"
          - "system.disk.operations"
          
          # Process metrics - only the most critical ones
          - "process.cpu.time"
          - "process.memory.usage"
          - "process.uptime"
          
          # Critical status metrics
          - ".*error.*"
          - ".*failure.*"
          - ".*status.*"
          
          # Custom app metrics
          - "phoenix.observability.*"
          - "phoenix_.*"

  filter/ultra_pipeline:
    # Ultra-optimized pipeline with aggressive filtering
    metrics:
      include:
        match_type: regexp
        metric_names:
          # Only the most critical metrics
          - "system.cpu.utilization"
          - "system.memory.utilization"
          - "system.filesystem.utilization"
          - "process.cpu.time"
          - ".*error.*"
          - "phoenix_.*"

  # Add pipeline specific info to metrics
  metricstransform/full_pipeline:
    transforms:
      - include: ".*"
        match_type: regexp
        action: update
        operations:
          - action: add_label
            new_label: pipeline_full
            new_value: "1"
          - action: add_label
            new_label: ts_count_full
            new_value: "250"
          - action: add_label
            new_label: quality_full
            new_value: "100"

  metricstransform/opt_moderate:
    transforms:
      - include: ".*"
        match_type: regexp
        action: update
        operations:
          - action: add_label
            new_label: pipeline_opt_moderate
            new_value: "1"
          - action: add_label
            new_label: ts_count_opt_moderate
            new_value: "150"
          - action: add_label
            new_label: quality_opt_moderate
            new_value: "95"
          - action: add_label
            new_label: cost_reduction_opt_moderate
            new_value: "40"

  metricstransform/opt_ultra:
    transforms:
      - include: ".*"
        match_type: regexp
        action: update
        operations:
          - action: add_label
            new_label: pipeline_opt_ultra
            new_value: "1"
          - action: add_label
            new_label: ts_count_opt_ultra
            new_value: "50"
          - action: add_label
            new_label: quality_opt_ultra
            new_value: "85"
          - action: add_label
            new_label: cost_reduction_opt_ultra
            new_value: "80"

  metricstransform/experimental:
    transforms:
      - include: ".*"
        match_type: regexp
        action: update
        operations:
          - action: add_label
            new_label: pipeline_exp
            new_value: "1"
          - action: add_label
            new_label: ts_count_exp
            new_value: "100"
          - action: add_label
            new_label: quality_exp
            new_value: "90"
          - action: add_label
            new_label: cost_reduction_exp
            new_value: "60"

  metricstransform/hybrid:
    transforms:
      - include: ".*"
        match_type: regexp
        action: update
        operations:
          - action: add_label
            new_label: pipeline_hybrid
            new_value: "1"
          - action: add_label
            new_label: ts_count_hybrid
            new_value: "125"
          - action: add_label
            new_label: quality_hybrid
            new_value: "93"
          - action: add_label
            new_label: cost_reduction_hybrid
            new_value: "50"

exporters:
  # Export to Prometheus for local dashboard visualization
  prometheus:
    endpoint: "0.0.0.0:8888"
    namespace: ""
    send_timestamps: true
    enable_open_metrics: true
    resource_to_telemetry_conversion:
      enabled: true

  # Debugging/logging exporter
  debug:
    verbosity: detailed

  # Filesystem output for verification
  file:
    path: /tmp/metrics.json
    format: json
    
service:
  pipelines:
    # Pipeline with full fidelity
    metrics/full:
      receivers: [hostmetrics]
      processors: [resourcedetection, attributes, metricstransform/pipeline_labels, metricstransform/full_pipeline, metricstransform/phoenix_system, batch]
      exporters: [prometheus]
      
    # Pipeline with optimized moderate processing
    metrics/opt_moderate:
      receivers: [hostmetrics]
      processors: [resourcedetection, attributes, filter/opt_pipeline, metricstransform/pipeline_labels, metricstransform/opt_moderate, metricstransform/phoenix_system, batch]
      exporters: [prometheus]
      
    # Pipeline with ultra optimization
    metrics/opt_ultra:
      receivers: [hostmetrics]
      processors: [resourcedetection, attributes, filter/ultra_pipeline, metricstransform/pipeline_labels, metricstransform/opt_ultra, metricstransform/phoenix_system, batch]
      exporters: [prometheus]
      
    # Experimental pipeline with research-grade optimizations
    metrics/experimental:
      receivers: [hostmetrics]
      processors: [resourcedetection, attributes, filter/opt_pipeline, metricstransform/pipeline_labels, metricstransform/experimental, metricstransform/phoenix_system, batch]
      exporters: [prometheus]
      
    # Hybrid pipeline combining approaches
    metrics/hybrid:
      receivers: [hostmetrics]
      processors: [resourcedetection, attributes, filter/opt_pipeline, metricstransform/pipeline_labels, metricstransform/hybrid, metricstransform/phoenix_system, batch]
      exporters: [prometheus]

    # Control signals handling pipeline
    metrics/control:
      receivers: [prometheus/control_signals, filereceiver]
      processors: [batch]
      exporters: [prometheus, debug]
  
  # Telemetry settings
  telemetry:
    metrics:
      address: ":8889" # Address to expose the self-metrics
