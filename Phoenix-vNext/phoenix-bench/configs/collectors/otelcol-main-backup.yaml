# Simplified OpenTelemetry Collector Configuration for Phoenix-vNext
# Compatible with otel/opentelemetry-collector-contrib:0.103.0

# Config sources with improved reliability
config_sources:
  ctlfile:
    path: ${CONTROL_SIGNAL_PATH:/etc/otelcol/control_signals/opt_mode.yaml}
    watch: true
    format: yaml # Expects YAML format
    reload_delay: 10s # Debounce rapid file changes
    schema: # Basic schema validation for the control file
      type: object
      properties:
        mode: { type: string, enum: ["moderate", "ultra", "adaptive"] }
        last_updated: { type: string, format: date-time }
        config_version: { type: integer }
        correlation_id: { type: string }
        reason: { type: string }
        optimization_level: { type: integer, minimum: 0, maximum: 100 }
      required: [mode, last_updated, config_version, correlation_id]

receivers:
  hostmetrics:
    collection_interval: 30s
    root_path: /host
    scrapers:
      cpu: {}
      memory: {}
      process: { mute_process_name_error: true }
      filesystem: {}
      disk: {}
      load: {}
  
  hostmetrics/hires:
    collection_interval: 5s
    root_path: /host
    scrapers:
      cpu: {}
      memory: {}
  
  otlp/control:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
        
  filelog/control: # Monitors the control file for changes as log entries
    include: [ "${CONTROL_SIGNAL_PATH:/etc/otelcol/control_signals/opt_mode.yaml}" ]
    start_at: end # Process only new changes
    include_file_path: true
    operators: # Parse the YAML content of the file
      - type: yaml_parser
        parse_from: body # Assuming the file content is the body of the log

processors:
  memory_limiter:
    check_interval: 5s
    limit_percentage: 80
    spike_limit_percentage: 25
  
  resource/add_tags:
    attributes:
      - key: benchmark.id
        value: phoenix-vnext
        action: insert
      - key: service.name
        value: "phoenix-observability"
        action: insert
      - key: service.version
        value: "1.0.0"
        action: insert
      - key: deployment.environment
        value: development
        action: insert
  
  batch:
    send_batch_size: 1000
    timeout: 10s

  # Pipeline-specific processors
  resource/pipeline_full:
    attributes:
      - key: pipeline.id
        value: "full"
        action: insert
      - key: optimization.level
        value: "0"
        action: insert

  resource/pipeline_opt:
    attributes:
      - key: pipeline.id
        value: "opt"
        action: insert
      - key: optimization.level
        value: "moderate"
        action: insert

  resource/pipeline_ultra:
    attributes:
      - key: pipeline.id
        value: "ultra"
        action: insert
      - key: optimization.level
        value: "ultra"
        action: insert

  resource/pipeline_exp:
    attributes:
      - key: pipeline.id
        value: "exp"
        action: insert
      - key: optimization.level
        value: "experimental"
        action: insert

  resource/pipeline_hybrid:
    attributes:
      - key: pipeline.id
        value: "hybrid"
        action: insert
      - key: optimization.level
        value: "hybrid"
        action: insert

  # Cardinality reduction filters for each optimization level
  
  # Moderate optimization - exclude debug and low-value metrics
  filter/moderate:
    metrics:
      exclude:
        match_type: regexp
        metric_names:
          - "^system\\.disk\\..*debug.*$"
          - "^system\\.filesystem\\..*inodes.*$"
          - "^process\\..*\\.file_descriptor.*$"
  
  # Aggressive optimization - only keep core metrics
  filter/aggressive:
    metrics:
      include:
        match_type: regexp
        metric_names:
          - "^(system\\.(cpu|memory)\\.|process\\.(cpu|memory)\\.|phoenix_.*)\\..*$"
  
  # Ultra aggressive - only phoenix metrics and basic system metrics
  filter/ultra_aggressive:
    metrics:
      include:
        match_type: regexp  
        metric_names:
          - "^(phoenix_.*|system_cpu_.*|system_memory_usage).*$"
  
  # Top-K filter simulation for experimental pipeline (most important metrics only)
  filter/topk_simulation:
    metrics:
      include:
        match_type: regexp
        metric_names:
          - "^(phoenix_.*|system_(cpu|memory)_.*)$"

exporters:
  # Full pipeline exporter
  prometheus/full:
    endpoint: "0.0.0.0:8888"
    metric_expiration: 180m
    
  # Optimized pipeline exporter  
  prometheus/opt:
    endpoint: "0.0.0.0:8889"
    metric_expiration: 180m
    
  # Ultra optimized pipeline exporter
  prometheus/ultra:
    endpoint: "0.0.0.0:8890"
    metric_expiration: 180m
    
  # Experimental pipeline exporter
  prometheus/exp:
    endpoint: "0.0.0.0:8895"
    metric_expiration: 180m
    
  # Hybrid pipeline exporter
  prometheus/hybrid:
    endpoint: "0.0.0.0:8896"
    metric_expiration: 180m

  otlp/to_observer:
    endpoint: http://otelcol-observer:4319
    tls:
      insecure: true

  debug:
    verbosity: basic

  # New Relic exporters (using environment variables)
  otlphttp/nr_full:
    endpoint: https://otlp.nr-data.net:4318
    headers:
      api-key: "${NR_FULL_KEY}"

  otlphttp/nr_opt:
    endpoint: https://otlp.nr-data.net:4318
    headers:
      api-key: "${NR_OPT_KEY}"

  otlphttp/nr_ultra:
    endpoint: https://otlp.nr-data.net:4318
    headers:
      api-key: "${NR_ULTRA_KEY}"

  otlphttp/nr_exp:
    endpoint: https://otlp.nr-data.net:4318
    headers:
      api-key: "${NR_EXP_KEY}"

  otlphttp/nr_hybrid:
    endpoint: https://otlp.nr-data.net:4318
    headers:
      api-key: "${NR_HYBRID_KEY}"

extensions:
  health_check:
    endpoint: 0.0.0.0:13133
  
  pprof:
    endpoint: 0.0.0.0:1777
    
  zpages:
    endpoint: 0.0.0.0:55679

  memory_ballast:
    size_mib: 64

service:
  extensions: [health_check, pprof, zpages, memory_ballast]
  
  pipelines:
    # Full pipeline - baseline with minimal processing (highest cardinality)
    metrics/full:
      receivers: [hostmetrics, hostmetrics/hires, otlp/control]
      processors: [memory_limiter, resource/add_tags, resource/pipeline_full, batch]
      exporters: [prometheus/full, otlp/to_observer]
    
    # Optimized pipeline - moderate optimization (medium cardinality)
    metrics/opt:
      receivers: [hostmetrics, otlp/control]
      processors: [memory_limiter, resource/add_tags, resource/pipeline_opt, filter/moderate, batch]
      exporters: [prometheus/opt, otlp/to_observer]
    
    # Ultra pipeline - aggressive optimization (lowest cardinality)
    metrics/ultra:
      receivers: [hostmetrics, otlp/control]
      processors: [memory_limiter, resource/add_tags, resource/pipeline_ultra, filter/ultra_aggressive, batch]
      exporters: [prometheus/ultra, otlp/to_observer]
    
    # Experimental pipeline - top-K simulation (highest value metrics only)
    metrics/exp:
      receivers: [hostmetrics, otlp/control]
      processors: [memory_limiter, resource/add_tags, resource/pipeline_exp, filter/topk_simulation, batch]
      exporters: [prometheus/exp, otlp/to_observer]
    
    # Hybrid pipeline - balanced approach with moderate filtering
    metrics/hybrid:
      receivers: [hostmetrics, hostmetrics/hires, otlp/control]
      processors: [memory_limiter, resource/add_tags, resource/pipeline_hybrid, filter/aggressive, batch]
      exporters: [prometheus/hybrid, otlp/to_observer]

  telemetry:
    logs:
      level: info
    metrics:
      address: 0.0.0.0:8887