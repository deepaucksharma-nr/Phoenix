receivers:
  # Scrape metrics from the main collector
  prometheus/otelcol_main:
    config:
      scrape_configs:
        - job_name: 'otelcol-main-scrape'
          scrape_interval: 10s
          static_configs:
            - targets: ['otelcol-main:8888']
  
  # Scrape metrics from the synthetic metrics generator
  prometheus/synthetic:
    config:
      scrape_configs:
        - job_name: 'synthetic-scrape'
          scrape_interval: 5s
          static_configs:
            - targets: ['synthetic-metrics:9999']
          metric_relabel_configs:
            # Debug label to track source
            - source_labels: [__name__]
              target_label: metric_source
              replacement: 'synthetic'
            
  # OTLP receiver for direct control metrics
  otlp:
    protocols:
      grpc:
        endpoint: "0.0.0.0:4317"
        
  # Self-monitoring for the observer collector
  hostmetrics/observer:
    collection_interval: 30s
    scrapers:
      cpu: {}
      memory: {}
      load: {}

processors:
  # Batching for efficiency
  batch:
    send_batch_size: 1000
    timeout: 10s
  
  # Handle pipeline labels from scrape
  metricstransform/pipeline_labels:
    transforms:
      - include: ".*"
        match_type: regexp
        action: update
        operations:
          - action: add_label
            new_label: collector_pipeline
            new_value: "main"
    
  # Filter to process only time series count metrics
  filter/ts_count:
    metrics:
      include:
        match_type: regexp
        metric_names:
          - ".*ts_count.*"
          - "phoenix_.*"
          
  # NEW: Create phoenix_opt_mode metric with mode value (0=moderate, 1=ultra)
  metricstransform/create_mode_metric:
    transforms:
      - include: "system\\.cpu\\..*"
        match_type: regexp
        action: insert
        new_name: "phoenix_opt_mode"
        operations:
          - action: aggregate_labels
            aggregation_type: sum
            label_set: []
          - action: experimental_scale_value
            # Default to 0 (moderate) - will be updated by condition check
            experimental_scale: 0
  
  # Determine optimization mode based on time series counts
  metricstransform/mode_decision:
    transforms:
      # Set opt_mode to 1 when series count exceeds threshold
      - include: "phoenix_system_cpu_time_seconds_total"
        match_type: regexp
        action: update
        operations:
          - action: add_label
            new_label: opt_mode
            new_value: "0"
          - action: add_label
            new_label: threshold_moderate
            new_value: "${THRESHOLD_MODERATE}"
          - action: add_label
            new_label: threshold_ultra
            new_value: "${THRESHOLD_ULTRA}"
  
  # Generate control metrics for Prometheus
  metricstransform/control_metrics:
    transforms:
      # Generated optimization mode metric
      - include: "phoenix_opt_mode"
        match_type: strict
        action: update
        operations:
          - action: add_label
            new_label: source
            new_value: "observer_decision"
      
      # Set standard thresholds on system metrics
      - include: "phoenix_system_cpu_time_seconds_total"
        match_type: strict
        action: update
        operations:
          - action: add_label
            new_label: threshold_moderate
            new_value: "${THRESHOLD_MODERATE}"
          - action: add_label
            new_label: threshold_ultra
            new_value: "${THRESHOLD_ULTRA}"

exporters:
  # Export optimization mode to Prometheus for dashboards
  prometheus:
    endpoint: "0.0.0.0:9889"
    namespace: ""
    send_timestamps: true
    enable_open_metrics: true
    resource_to_telemetry_conversion:
      enabled: true
  
  # Export optimization mode to file for main collector to pick up
  file:
    path: ${CONTROL_SIGNAL_WRITE_PATH}
    format: yaml
  
  # Debug exporter
  debug:
    verbosity: detailed

service:
  pipelines:
    # Process metrics from main collector
    metrics/collection:
      receivers: [prometheus/otelcol_main]
      processors: [batch]
      exporters: [prometheus]
    
    # Process synthetic metrics (direct ingestion)
    metrics/synthetic:
      receivers: [prometheus/synthetic]
      processors: [batch]
      exporters: [prometheus]
    
    # Observer self-monitoring
    metrics/self:
      receivers: [hostmetrics/observer]
      processors: [batch]
      exporters: [prometheus]

    # Observer mode control
    metrics/mode_control:
      receivers: [hostmetrics/observer]
      processors: [metricstransform/create_mode_metric, metricstransform/mode_decision, metricstransform/control_metrics, batch]
      exporters: [prometheus, file]
  
  extensions: []
  
  telemetry:
    metrics:
      level: detailed
