# Simplified OpenTelemetry Collector Configuration for Phoenix-vNext
# Compatible with otel/opentelemetry-collector-contrib:0.103.0

receivers:
  hostmetrics:
    collection_interval: 30s
    root_path: /host
    scrapers:
      cpu: {}
      memory: {}
      process: { mute_process_name_error: true }
      filesystem: {}
      disk: {}
      load: {}
  
  hostmetrics/hires:
    collection_interval: 5s
    root_path: /host
    scrapers:
      cpu: {}
      memory: {}
  
  otlp/control:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

processors:
  memory_limiter:
    check_interval: 5s
    limit_percentage: 80
    spike_limit_percentage: 25
  
  resource/add_tags:
    attributes:
      - key: benchmark.id
        value: phoenix-vnext
        action: insert
      - key: service.name
        value: "phoenix-observability"
        action: insert
      - key: service.version
        value: "1.0.0"
        action: insert
      - key: deployment.environment
        value: development
        action: insert
  
  batch:
    send_batch_size: 1000
    timeout: 10s

  # Pipeline-specific processors
  resource/pipeline_full:
    attributes:
      - key: pipeline.id
        value: "full"
        action: insert
      - key: optimization.level
        value: "0"
        action: insert

  resource/pipeline_opt:
    attributes:
      - key: pipeline.id
        value: "opt"
        action: insert
      - key: optimization.level
        value: "moderate"
        action: insert

  resource/pipeline_ultra:
    attributes:
      - key: pipeline.id
        value: "ultra"
        action: insert
      - key: optimization.level
        value: "ultra"
        action: insert

  resource/pipeline_exp:
    attributes:
      - key: pipeline.id
        value: "exp"
        action: insert
      - key: optimization.level
        value: "experimental"
        action: insert

  resource/pipeline_hybrid:
    attributes:
      - key: pipeline.id
        value: "hybrid"
        action: insert
      - key: optimization.level
        value: "hybrid"
        action: insert

  # Filtering processors for optimization
  filter/moderate:
    metrics:
      exclude:
        match_type: regexp
        metric_names:
          - "^system\\.disk\\..*\\.debug$"

  filter/aggressive:
    metrics:
      include:
        match_type: regexp
        metric_names:
          - "^(system\\.(cpu|memory)|process\\.(cpu|memory))\\..*$"

exporters:
  prometheus:
    endpoint: "0.0.0.0:8888"
    metric_expiration: 180m
    
  prometheus/consistency:
    endpoint: "0.0.0.0:8889"
    metric_expiration: 180m
    
  prometheus/feedback:
    endpoint: "0.0.0.0:8890"
    metric_expiration: 180m

  otlp/to_observer:
    endpoint: http://otelcol-observer:4319
    tls:
      insecure: true

  debug:
    verbosity: basic

  # New Relic exporters (using environment variables)
  otlphttp/nr_full:
    endpoint: https://otlp.nr-data.net:4318
    headers:
      api-key: "${NR_FULL_KEY}"

  otlphttp/nr_opt:
    endpoint: https://otlp.nr-data.net:4318
    headers:
      api-key: "${NR_OPT_KEY}"

  otlphttp/nr_ultra:
    endpoint: https://otlp.nr-data.net:4318
    headers:
      api-key: "${NR_ULTRA_KEY}"

  otlphttp/nr_exp:
    endpoint: https://otlp.nr-data.net:4318
    headers:
      api-key: "${NR_EXP_KEY}"

  otlphttp/nr_hybrid:
    endpoint: https://otlp.nr-data.net:4318
    headers:
      api-key: "${NR_HYBRID_KEY}"

extensions:
  health_check:
    endpoint: 0.0.0.0:13133
  
  pprof:
    endpoint: 0.0.0.0:1777
    
  zpages:
    endpoint: 0.0.0.0:55679

  memory_ballast:
    size_mib: 64

service:
  extensions: [health_check, pprof, zpages, memory_ballast]
  
  pipelines:
    # Full pipeline - baseline with minimal processing
    metrics/full:
      receivers: [hostmetrics, hostmetrics/hires]
      processors: [memory_limiter, resource/add_tags, resource/pipeline_full, batch]
      exporters: [prometheus, otlphttp/nr_full, otlp/to_observer]
    
    # Optimized pipeline - moderate optimization
    metrics/opt:
      receivers: [hostmetrics]
      processors: [memory_limiter, resource/add_tags, resource/pipeline_opt, filter/moderate, batch]
      exporters: [prometheus, otlphttp/nr_opt, otlp/to_observer]
    
    # Ultra pipeline - aggressive optimization
    metrics/ultra:
      receivers: [hostmetrics]
      processors: [memory_limiter, resource/add_tags, resource/pipeline_ultra, filter/aggressive, batch]
      exporters: [prometheus, otlphttp/nr_ultra, otlp/to_observer]
    
    # Experimental pipeline - testing new algorithms
    metrics/exp:
      receivers: [hostmetrics]
      processors: [memory_limiter, resource/add_tags, resource/pipeline_exp, filter/moderate, batch]
      exporters: [prometheus, otlphttp/nr_exp, otlp/to_observer]
    
    # Hybrid pipeline - balanced approach
    metrics/hybrid:
      receivers: [hostmetrics, hostmetrics/hires]
      processors: [memory_limiter, resource/add_tags, resource/pipeline_hybrid, filter/moderate, batch]
      exporters: [prometheus, otlphttp/nr_hybrid, otlp/to_observer]
    
    # Control pipeline - receives control signals
    metrics/control:
      receivers: [otlp/control]
      processors: [memory_limiter, batch]
      exporters: [prometheus/feedback, debug]
    
    # Consistency checking pipeline
    metrics/consistency:
      receivers: [hostmetrics]
      processors: [memory_limiter, resource/add_tags, batch]
      exporters: [prometheus/consistency]

  telemetry:
    logs:
      level: info
    metrics:
      address: 0.0.0.0:8887