# Phoenix-vNext Consolidated Configuration
# Single unified configuration for simplified architecture

receivers:
  # Standard system metrics collection
  hostmetrics:
    collection_interval: 30s
    root_path: /host
    scrapers:
      cpu: {}
      memory: {}
      filesystem: {}
      disk: {}
      load: {}
      process:
        mute_process_name_error: true
        exclude:
          names:
            - "kworker/.*"
            - "migration/.*" 
            - "rcu_.*"
            - "ksoftirqd/.*"
            - "systemd-.*"
            - "dbus.*"
        metrics:
          process.cpu.time:
            enabled: true
          process.memory.usage:
            enabled: true
          process.memory.virtual:
            enabled: true
          process.disk.io:
            enabled: true

  # OTLP receiver for synthetic data
  otlp/control:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

processors:
  memory_limiter:
    check_interval: 5s
    limit_percentage: 80
    spike_limit_percentage: 25
  
  resource/add_tags:
    attributes:
      - key: benchmark.id
        value: phoenix-vnext
        action: insert
      - key: service.name
        value: "phoenix-observability"
        action: insert
      - key: service.version
        value: "1.0.0"
        action: insert
      - key: deployment.environment
        value: development
        action: insert

  # Process attribute sanitization for cardinality control
  transform/attribute_sanitization:
    metric_statements:
      - context: resource
        statements:
          # Remove high-cardinality attributes
          - delete_key(attributes, "process.pid")
          - delete_key(attributes, "process.parent_pid")
          - delete_key(attributes, "container.id")
          - delete_key(attributes, "process.command_line")
          - delete_key(attributes, "process.owner")

  cumulativetodelta:

  batch:
    send_batch_size: 1000
    timeout: 10s

  resourcedetection:
    detectors: [env, system]
    timeout: 30s
    system:
      hostname_sources: [os, dns]

  # Pipeline selectors for different optimization levels
  resource/pipeline_full:
    attributes: 
      - key: pipeline.id
        value: "full"
        action: insert
      - key: optimization.level
        value: "0"
        action: insert

  resource/pipeline_opt:
    attributes: 
      - key: pipeline.id
        value: "opt"
        action: insert
      - key: optimization.level
        value: "moderate"
        action: insert

  resource/pipeline_ultra:
    attributes:
      - key: pipeline.id
        value: "ultra"
        action: insert
      - key: optimization.level
        value: "ultra"
        action: insert

exporters:
  # Prometheus exporters for different optimization levels
  prometheus/full:
    endpoint: 0.0.0.0:8888
    namespace: phoenix_full
    send_timestamps: true
    metric_expiration: 180m
    resource_to_telemetry_conversion: { enabled: true }

  prometheus/opt:
    endpoint: 0.0.0.0:8889
    namespace: phoenix_opt
    send_timestamps: true
    metric_expiration: 180m
    resource_to_telemetry_conversion: { enabled: true }

  prometheus/ultra:
    endpoint: 0.0.0.0:8890
    namespace: phoenix_ultra
    send_timestamps: true
    metric_expiration: 180m
    resource_to_telemetry_conversion: { enabled: true }

  # Local Prometheus storage
  prometheusremotewrite/local:
    endpoint: http://prometheus:9090/api/v1/write
    resource_to_telemetry_conversion: { enabled: true }

  debug:
    verbosity: basic

extensions:
  health_check:
    endpoint: 0.0.0.0:13133
  pprof:
    endpoint: 0.0.0.0:1777
  zpages:
    endpoint: 0.0.0.0:55679
  memory_ballast:
    size_mib: 256

service:
  extensions: [health_check, pprof, zpages, memory_ballast]
  
  telemetry:
    metrics: { address: 0.0.0.0:8888 }
    logs:
      level: info
      development: false
      encoding: json
  
  pipelines:
    # Full pipeline - no optimization
    metrics/full:
      receivers: [hostmetrics, otlp/control]
      processors:
        - memory_limiter
        - resourcedetection
        - resource/add_tags
        - resource/pipeline_full
        - cumulativetodelta
        - batch
      exporters: [prometheus/full, prometheusremotewrite/local]
    
    # Optimized pipeline - basic filtering
    metrics/opt:
      receivers: [hostmetrics, otlp/control]
      processors:
        - memory_limiter
        - resourcedetection
        - resource/add_tags
        - resource/pipeline_opt
        - transform/attribute_sanitization
        - cumulativetodelta
        - batch
      exporters: [prometheus/opt, prometheusremotewrite/local]
    
    # Ultra pipeline - aggressive optimization
    metrics/ultra:
      receivers: [hostmetrics, otlp/control]
      processors:
        - memory_limiter
        - resourcedetection
        - resource/add_tags
        - resource/pipeline_ultra
        - transform/attribute_sanitization
        - cumulativetodelta
        - batch
      exporters: [prometheus/ultra, prometheusremotewrite/local]