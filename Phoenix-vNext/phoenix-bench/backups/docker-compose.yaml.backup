version: "3.9"

services:
  ### Workload generators (CPU-heavy & IO-heavy) ###
  stress-cpu:
    image: polinux/stress
    command: ["stress", "--cpu", "8", "--vm", "2", "--vm-bytes", "512M", "--timeout", "0"]
    pid: host
    restart: unless-stopped

  stress-io:
    image: polinux/stress
    command: ["stress", "--io", "4", "--hdd", "1", "--timeout", "0"]
    pid: host
    restart: unless-stopped

  ### Main Collector with 5 pipelines ###
  otelcol-main:
    image: otel/opentelemetry-collector-contrib:0.103.0
    command: ["--config=/etc/otelcol/otelcol-main.yaml"]
    privileged: true
    pid: host
    env_file: .env # Load environment variables from .env file
    environment:
      HOST_PROC: /host/proc
      CONTROL_SIGNAL_PATH: /etc/otelcol/control_signals/opt_mode.yaml
      # NR keys, BENCHMARK_ID, DEPLOYMENT_ENV, CORRELATION_ID will be loaded from .env
    volumes:
      - ./configs/collectors/otelcol-process-optimized.yaml:/etc/otelcol/otelcol-main.yaml:ro
      - ./configs/control_signals:/etc/otelcol/control_signals:rw
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc:/host/etc:ro
      - ./data/otelcol_main:/data
    ports:
      - "8888:8888" # Full pipeline Prometheus exporter
      - "8889:8889" # Opt pipeline Prometheus exporter
      - "8890:8890" # Ultra pipeline Prometheus exporter
      - "8895:8895" # Exp pipeline Prometheus exporter
      - "8896:8896" # Hybrid pipeline Prometheus exporter
      - "4317:4317" # otlp/control gRPC
      - "4318:4318" # otlp/control HTTP
      - "13133:13133" # health_check extension
      - "1777:1777"   # pprof extension
      - "55679:55679" # zpages extension
    depends_on:
      - stress-cpu
      - stress-io
    restart: unless-stopped

  ### Observer / control-plane ###
  otelcol-observer:
    image: otel/opentelemetry-collector-contrib:0.103.0
    command: ["--config=/etc/otelcol/otelcol-observer.yaml"]
    env_file: .env # Load environment variables from .env file
    environment:
      CONTROL_SIGNAL_WRITE_PATH: /control_out/opt_mode.yaml
      OBSERVER_INSTANCE_ID: ${HOSTNAME:-otelcol-observer}
      # THRESHOLD_* vars will be loaded from .env
    volumes:
      - ./configs/collectors/otelcol-observer.yaml:/etc/otelcol/otelcol-observer.yaml:ro
      - ./configs/control_signals:/control_out:rw
    ports:
      - "8891:8891" # Self-metrics for otelcol-observer
      - "4319:4319" # OTLP receiver gRPC from main (otlp/from_main_collector)
      - "4320:4320" # OTLP receiver HTTP from main
      - "13134:13133" # Health_check for observer (mapping to different host port)
      - "1778:1777"   # pprof for observer
      - "55680:55679" # zpages for observer
    depends_on:
      - otelcol-main
    restart: unless-stopped

  ### Synthetic Metrics Collector ###
  synthetic-metrics-collector:
    image: otel/opentelemetry-collector-contrib:0.103.0
    command: ["--config=/etc/otelcol/synthetic-metrics.yaml"]
    env_file: .env # Load environment variables from .env file
    volumes:
      - ./configs/metrics/synthetic-metrics.yaml:/etc/otelcol/synthetic-metrics.yaml:ro
    ports:
      - "9999:9999" # Expose synthetic metrics endpoint
    depends_on:
      - otelcol-main
    restart: unless-stopped

  ### Prometheus & Grafana ###
  prometheus:
    image: prom/prometheus:v2.52.0
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle' # To allow config reload via POST /-/reload
    volumes:
      - ./configs/monitoring/prometheus.yaml:/etc/prometheus/prometheus.yml:ro
      - ./data/prometheus:/prometheus
    ports: ["9090:9090"]
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.4.3
    env_file: .env
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_PROVISIONING_PATH: /etc/grafana/provisioning
      GF_AUTH_ANONYMOUS_ENABLED: "true"  # Allow anonymous access for easy viewing
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Viewer"
      GF_USERS_DEFAULT_THEME: "light"
    volumes:
      - ./configs/monitoring/grafana-datasource.yaml:/etc/grafana/provisioning/datasources/datasources.yaml:ro
      - ./configs/monitoring/grafana-dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards_provider.yaml:ro
      - ./configs/dashboards:/etc/grafana/provisioning/dashboards:ro # Mount the dashboards directory as read-only
      - ./data/grafana:/var/lib/grafana
    ports: ["3000:3000"]
    restart: unless-stopped


  # Optional: Service for direct-metrics-generator.sh if you want it containerized
  # direct-metrics-script:
  #   image: alpine/curl # or appropriate image with curl and bash
  #   command: ["sh", "/app/direct-metrics-generator.sh"]
  #   volumes:
  #     - ./synthetic-metrics.sh:/app:ro
  #   environment:
  #     PROMETHEUS_URL: http://prometheus:9090
  #     METRICS_INTERVAL: 10
  #   depends_on:
  #     - prometheus
  #   restart: unless-stopped