# Process Top-K Pipeline Configuration
# This pipeline collects process metrics and filters to keep only the top K processes
# by CPU or memory usage, significantly reducing cardinality

receivers:
  hostmetrics:
    collection_interval: 10s
    scrapers:
      process:
        include:
          match_type: regexp
          names: [".*"]  # Collect all processes initially
        exclude:
          names: []
        mute_process_name_error: true
        mute_process_exe_error: true
        mute_process_io_error: true
        resource_attributes:
          process.executable.path:
            enabled: true
          process.executable.name:
            enabled: true
          process.command_line:
            enabled: false  # Reduce cardinality by not including command line
          process.owner:
            enabled: true

processors:
  # Add resource attributes for grouping
  resource:
    attributes:
      - key: phoenix.pipeline
        value: process-topk-v1
        action: upsert
      - key: phoenix.strategy
        value: top-k
        action: upsert

  # Group by process name to aggregate metrics
  groupbyattrs:
    keys:
      - process.executable.name
      - process.owner

  # Batch before processing to improve efficiency
  batch:
    timeout: 10s
    send_batch_size: 1000

  # Transform to calculate aggregated metrics
  transform/aggregate:
    metric_statements:
      - context: datapoint
        statements:
          - set(attributes["process.count"], 1)  # Count processes in group

  # Custom Phoenix processor to keep only top K processes
  phoenix/topk:
    metric_name: process.cpu.utilization
    top_k: 10  # Keep top 10 processes by CPU
    group_by_attributes:
      - process.executable.name
    secondary_sort:
      metric_name: process.memory.usage
      direction: desc

  # Add metadata about filtering
  attributes/metadata:
    actions:
      - key: phoenix.filtered
        value: true
        action: upsert
      - key: phoenix.filter_type
        value: top-k-cpu
        action: upsert
      - key: phoenix.top_k_value
        value: "10"
        action: upsert

  # Memory limiter to prevent OOM
  memory_limiter:
    check_interval: 1s
    limit_mib: 512
    spike_limit_mib: 128

exporters:
  # Primary metrics destination
  prometheus:
    endpoint: "0.0.0.0:8889"
    namespace: phoenix
    const_labels:
      pipeline: process-topk-v1
    resource_to_telemetry_conversion:
      enabled: true

  # Debug output (disabled in production)
  logging:
    loglevel: debug
    sampling_initial: 10
    sampling_thereafter: 100

  # Forward to downstream collectors
  otlp:
    endpoint: otelcol:4317
    tls:
      insecure: true

service:
  pipelines:
    metrics:
      receivers: [hostmetrics]
      processors: 
        - memory_limiter
        - resource
        - groupbyattrs
        - batch
        - transform/aggregate
        - phoenix/topk
        - attributes/metadata
      exporters: [prometheus, otlp]

  telemetry:
    logs:
      level: info
      initial_fields:
        service: phoenix-process-topk
    metrics:
      level: detailed
      address: 0.0.0.0:8888

  extensions: [health_check, pprof, zpages]

extensions:
  health_check:
    endpoint: 0.0.0.0:13133
    path: "/health"
    
  pprof:
    endpoint: 0.0.0.0:1777
    
  zpages:
    endpoint: 0.0.0.0:55679