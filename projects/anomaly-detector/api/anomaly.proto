syntax = "proto3";

package anomalydetector;

option go_package = "github.com/phoenix/platform/projects/anomaly-detector/api";

import "google/protobuf/timestamp.proto";

// AnomalyDetector service definition
service AnomalyDetector {
  // Detect detects anomalies in the given metrics
  rpc Detect(DetectRequest) returns (DetectResponse) {}
  
  // ConfigureDetection configures the anomaly detection parameters
  rpc ConfigureDetection(ConfigureRequest) returns (ConfigureResponse) {}
  
  // GetDetectionStatus returns the current status of anomaly detection
  rpc GetDetectionStatus(StatusRequest) returns (StatusResponse) {}
}

// Metric represents a single metric data point
message Metric {
  google.protobuf.Timestamp timestamp = 1;
  string name = 2;
  double value = 3;
  map<string, string> labels = 4;
}

// Anomaly represents a detected anomaly
message Anomaly {
  google.protobuf.Timestamp timestamp = 1;
  string type = 2;
  string severity = 3;
  Metric metric = 4;
  map<string, string> details = 5;
  double confidence = 6;
}

// DetectionConfig represents the configuration for anomaly detection
message DetectionConfig {
  double threshold = 1;
  int32 window_size = 2;
  repeated string algorithms = 3;
  map<string, string> parameters = 4;
}

// Request/Response messages
message DetectRequest {
  repeated Metric metrics = 1;
  DetectionConfig config = 2;
}

message DetectResponse {
  repeated Anomaly anomalies = 1;
  string status = 2;
  map<string, double> stats = 3;
}

message ConfigureRequest {
  DetectionConfig config = 1;
}

message ConfigureResponse {
  bool success = 1;
  string message = 2;
}

message StatusRequest {}

message StatusResponse {
  bool active = 1;
  DetectionConfig current_config = 2;
  map<string, string> stats = 3;
} 