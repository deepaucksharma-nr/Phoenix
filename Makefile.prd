# Makefile for PRD Compliance Checking and Implementation

.PHONY: check-prd-compliance
check-prd-compliance: ## Check current PRD compliance status
	@echo "=== Phoenix Platform PRD Compliance Check ==="
	@echo
	@echo "1. CLI Commands:"
	@echo -n "   Pipeline commands: "
	@if command -v phoenix >/dev/null 2>&1; then \
		count=$$(phoenix pipeline --help 2>/dev/null | grep -E "show|validate|status|get-active-config|rollback|delete" | wc -l); \
		echo "$$count/8 implemented"; \
	else \
		echo "Phoenix CLI not found"; \
	fi
	@echo -n "   Experiment commands: "
	@if command -v phoenix >/dev/null 2>&1; then \
		count=$$(phoenix experiment --help 2>/dev/null | grep -E "create|run|start|status|compare|promote|stop|list|delete" | wc -l); \
		echo "$$count/9 implemented"; \
	else \
		echo "Phoenix CLI not found"; \
	fi
	@echo -n "   LoadSim commands: "
	@if command -v phoenix >/dev/null 2>&1 && phoenix loadsim --help >/dev/null 2>&1; then \
		echo "Implemented"; \
	else \
		echo "Not implemented"; \
	fi
	@echo
	@echo "2. Operators:"
	@echo -n "   Pipeline Operator: "
	@if [ -f "projects/pipeline-operator/controllers/pipeline_controller.go" ]; then echo "✓ Implemented"; else echo "✗ Missing"; fi
	@echo -n "   LoadSim Operator: "
	@if grep -q "TODO: Implement" projects/loadsim-operator/cmd/main.go 2>/dev/null; then echo "✗ Stub only"; else echo "? Check manually"; fi
	@echo
	@echo "3. OTel Configs:"
	@for config in baseline priority topk aggregated adaptive; do \
		echo -n "   process-$$config-v1: "; \
		if find configs infrastructure -name "*process-$$config*" -type f | grep -q .; then \
			echo "✓ Found"; \
		else \
			echo "✗ Missing"; \
		fi; \
	done
	@echo
	@echo "4. Web Console:"
	@echo -n "   Deployed Pipelines View: "
	@if [ -f "projects/dashboard/src/pages/DeployedPipelines.tsx" ]; then echo "✓ Implemented"; else echo "✗ Missing"; fi
	@echo -n "   Pipeline Catalog View: "
	@if [ -f "projects/dashboard/src/pages/PipelineCatalog.tsx" ]; then echo "✓ Implemented"; else echo "✗ Missing"; fi
	@echo
	@echo "See PRD_ALIGNMENT_REPORT.md for detailed analysis"

.PHONY: create-missing-files
create-missing-files: ## Create stub files for missing components
	@echo "Creating missing component stubs..."
	@mkdir -p projects/phoenix-cli/cmd
	@mkdir -p projects/dashboard/src/pages
	@mkdir -p configs/pipelines/catalog/process
	@mkdir -p projects/loadsim-operator/controllers
	@mkdir -p projects/loadsim-operator/internal/generator
	@echo "// TODO: Implement pipeline show command" > projects/phoenix-cli/cmd/pipeline_show.go
	@echo "// TODO: Implement pipeline validate command" > projects/phoenix-cli/cmd/pipeline_validate.go
	@echo "// TODO: Implement pipeline status command" > projects/phoenix-cli/cmd/pipeline_status.go
	@echo "// TODO: Implement pipeline get-active-config command" > projects/phoenix-cli/cmd/pipeline_get_config.go
	@echo "// TODO: Implement pipeline rollback command" > projects/phoenix-cli/cmd/pipeline_rollback.go
	@echo "// TODO: Implement pipeline delete command" > projects/phoenix-cli/cmd/pipeline_delete.go
	@echo "// TODO: Implement experiment delete command" > projects/phoenix-cli/cmd/experiment_delete.go
	@echo "// TODO: Implement LoadSim controller" > projects/loadsim-operator/controllers/loadsimulationjob_controller.go
	@echo "Stub files created. Run 'make check-prd-compliance' to see status."

.PHONY: generate-topk-pipeline
generate-topk-pipeline: ## Generate process-topk-v1 pipeline config
	@mkdir -p configs/pipelines/catalog/process
	@cat > configs/pipelines/catalog/process/process-topk-v1.yaml << 'EOF'
# Process Top-K Pipeline Configuration
# Retains metrics only for top K processes by resource usage
apiVersion: v1
kind: ConfigMap
metadata:
  name: process-topk-v1
data:
  config.yaml: |
    receivers:
      hostmetrics:
        collection_interval: 10s
        scrapers:
          process:
            include:
              match_type: regexp
              names: [".*"]
    
    processors:
      # Group by process attributes
      groupbyattrs:
        keys: 
          - process.executable.name
          - process.pid
      
      # Sort by CPU and memory usage
      # Note: This is conceptual - actual implementation needs custom processor
      transform:
        metric_statements:
          - context: datapoint
            statements:
              - set(attributes["_cpu_rank"], CPU_USAGE_RANK())
              - set(attributes["_mem_rank"], MEMORY_USAGE_RANK())
      
      # Keep only top K processes
      filter:
        metrics:
          include:
            match_type: expr
            expressions:
              - '_cpu_rank <= $${TOPK_COUNT:10} or _mem_rank <= $${TOPK_COUNT:10}'
      
      # Remove ranking attributes
      attributes:
        actions:
          - key: _cpu_rank
            action: delete
          - key: _mem_rank
            action: delete
      
      batch:
        timeout: 10s
    
    exporters:
      otlp:
        endpoint: "$${NR_OTLP_ENDPOINT}"
        headers:
          api-key: "$${NR_API_KEY}"
      
      prometheus:
        endpoint: "0.0.0.0:8888"
    
    service:
      pipelines:
        metrics:
          receivers: [hostmetrics]
          processors: [groupbyattrs, transform, filter, attributes, batch]
          exporters: [otlp, prometheus]
EOF
	@echo "Created configs/pipelines/catalog/process/process-topk-v1.yaml"

.PHONY: generate-adaptive-pipeline
generate-adaptive-pipeline: ## Generate process-adaptive-filter-v1 pipeline config
	@mkdir -p configs/pipelines/catalog/process
	@cat > configs/pipelines/catalog/process/process-adaptive-filter-v1.yaml << 'EOF'
# Process Adaptive Filter Pipeline Configuration
# Dynamically adjusts filtering based on system load
apiVersion: v1
kind: ConfigMap
metadata:
  name: process-adaptive-filter-v1
data:
  config.yaml: |
    receivers:
      hostmetrics:
        collection_interval: 10s
        scrapers:
          process:
            include:
              match_type: regexp
              names: [".*"]
          cpu:
          memory:
    
    processors:
      # Calculate system load metrics
      metricstransform:
        transforms:
          - include: system.cpu.utilization
            action: update
            operations:
              - action: aggregate_labels
                aggregation_type: mean
                label_set: []
                new_label: system_cpu_avg
      
      # Adaptive filtering based on thresholds
      filter:
        metrics:
          include:
            match_type: expr
            expressions:
              # If system CPU > 80%, only keep critical processes
              - 'system_cpu_avg > 0.8 and process.executable.name =~ "^(nginx|java|postgres|mysql|redis|kafka)"'
              # If system CPU 50-80%, keep important processes
              - 'system_cpu_avg > 0.5 and system_cpu_avg <= 0.8 and (process.cpu.utilization > 0.05 or process.memory.utilization > 0.05)'
              # If system CPU < 50%, keep all processes with some activity
              - 'system_cpu_avg <= 0.5 and (process.cpu.utilization > 0.01 or process.memory.utilization > 0.01)'
      
      # Aggregate low-priority processes when under load
      groupbyattrs:
        keys:
          - process.executable.name
          - process.command_line
      
      batch:
        timeout: 10s
        send_batch_size: 1000
        send_batch_max_size: 1500
    
    exporters:
      otlp:
        endpoint: "$${NR_OTLP_ENDPOINT}"
        headers:
          api-key: "$${NR_API_KEY}"
      
      prometheus:
        endpoint: "0.0.0.0:8888"
    
    service:
      pipelines:
        metrics:
          receivers: [hostmetrics]
          processors: [metricstransform, filter, groupbyattrs, batch]
          exporters: [otlp, prometheus]
EOF
	@echo "Created configs/pipelines/catalog/process/process-adaptive-filter-v1.yaml"

.PHONY: test-acceptance
test-acceptance: ## Run PRD acceptance tests
	@echo "Running Phoenix Platform acceptance tests..."
	@cd tests/acceptance && go test -v -tags=acceptance ./...

.PHONY: validate-pipelines
validate-pipelines: ## Validate all OTel pipeline configurations
	@echo "Validating OpenTelemetry pipeline configurations..."
	@for config in $$(find configs infrastructure -name "*process-*-v1.yaml" -type f); do \
		echo "Validating $$config..."; \
		if command -v otelcol >/dev/null 2>&1; then \
			otelcol validate --config=$$config || echo "FAILED: $$config"; \
		else \
			echo "SKIP: otelcol not installed"; \
		fi; \
	done

.PHONY: prd-help
prd-help: ## Show PRD implementation help
	@echo "Phoenix Platform PRD Implementation Guide"
	@echo "========================================"
	@echo
	@echo "Quick Commands:"
	@echo "  make check-prd-compliance    - Check current implementation status"
	@echo "  make create-missing-files    - Create stub files for missing components"
	@echo "  make generate-topk-pipeline  - Generate process-topk-v1 config"
	@echo "  make generate-adaptive-pipeline - Generate process-adaptive-filter-v1 config"
	@echo "  make test-acceptance         - Run acceptance tests"
	@echo "  make validate-pipelines      - Validate OTel configurations"
	@echo
	@echo "Key Documents:"
	@echo "  PRD_ALIGNMENT_REPORT.md     - Detailed gap analysis"
	@echo "  PRD_IMPLEMENTATION_PLAN.md  - Sprint-by-sprint plan"
	@echo "  PRD_QUICK_REFERENCE.md      - Quick reference guide"
	@echo
	@echo "Next Steps:"
	@echo "  1. Run 'make check-prd-compliance' to see current status"
	@echo "  2. Pick a component from PRD_QUICK_REFERENCE.md"
	@echo "  3. Implement following the sprint plan"
	@echo "  4. Run 'make test-acceptance' to verify"

# Include in main Makefile
include Makefile.prd