openapi: 3.0.3
info:
  title: Phoenix Platform API
  description: |
    The Phoenix Platform API enables automated observability cost optimization through intelligent OpenTelemetry pipeline management.
    
    ## Authentication
    All API requests require authentication using a JWT token in the Authorization header:
    ```
    Authorization: Bearer <your-token>
    ```
  version: 1.0.0
  contact:
    name: Phoenix Platform Support
    email: support@phoenix-platform.io
    url: https://phoenix-platform.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: https://api.phoenix.example.com/v1
    description: Production API
  - url: https://staging-api.phoenix.example.com/v1
    description: Staging API
  - url: http://localhost:8080/v1
    description: Local development

tags:
  - name: Authentication
    description: Authentication endpoints
  - name: Experiments
    description: A/B testing experiment management
  - name: Pipelines
    description: OpenTelemetry pipeline templates
  - name: Metrics
    description: Metrics and analytics
  - name: Load Simulations
    description: Load testing scenarios

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login to obtain JWT token
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: secretpassword
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIs...
                  expires_at:
                    type: string
                    format: date-time
                    example: 2024-12-31T23:59:59Z
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /experiments:
    get:
      tags:
        - Experiments
      summary: List experiments
      operationId: listExperiments
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filter by experiment status
          schema:
            type: string
            enum: [pending, running, completed, failed, cancelled]
        - name: limit
          in: query
          description: Number of results to return
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: List of experiments
          content:
            application/json:
              schema:
                type: object
                properties:
                  experiments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Experiment'
                  total:
                    type: integer
                    example: 42
                  has_more:
                    type: boolean
                    example: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      tags:
        - Experiments
      summary: Create a new experiment
      operationId: createExperiment
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExperimentRequest'
      responses:
        '201':
          description: Experiment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experiment'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /experiments/{id}:
    get:
      tags:
        - Experiments
      summary: Get experiment details
      operationId: getExperiment
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Experiment ID
          schema:
            type: string
            example: exp-123
      responses:
        '200':
          description: Experiment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperimentDetails'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /experiments/{id}/metrics:
    get:
      tags:
        - Metrics
      summary: Get experiment metrics
      operationId: getExperimentMetrics
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Experiment ID
          schema:
            type: string
            example: exp-123
        - name: start
          in: query
          description: Start time (RFC3339)
          schema:
            type: string
            format: date-time
            example: 2024-01-25T10:00:00Z
        - name: end
          in: query
          description: End time (RFC3339)
          schema:
            type: string
            format: date-time
            example: 2024-01-25T12:00:00Z
        - name: resolution
          in: query
          description: Data resolution
          schema:
            type: string
            enum: [1m, 5m, 15m, 1h]
            default: 5m
      responses:
        '200':
          description: Time series metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /pipelines:
    get:
      tags:
        - Pipelines
      summary: List available pipeline templates
      operationId: listPipelines
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of pipeline templates
          content:
            application/json:
              schema:
                type: object
                properties:
                  pipelines:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pipeline'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Experiment:
      type: object
      properties:
        id:
          type: string
          example: exp-123
        name:
          type: string
          example: webserver-optimization
        status:
          type: string
          enum: [pending, running, completed, failed, cancelled]
          example: running
        baseline_pipeline:
          type: string
          example: process-baseline-v1
        candidate_pipeline:
          type: string
          example: process-priority-filter-v1
        created_at:
          type: string
          format: date-time
          example: 2024-01-25T10:00:00Z
        started_at:
          type: string
          format: date-time
          example: 2024-01-25T10:05:00Z

    CreateExperimentRequest:
      type: object
      required:
        - name
        - baseline_pipeline
        - candidate_pipeline
      properties:
        name:
          type: string
          example: database-optimization-test
        description:
          type: string
          example: Reduce database server metrics by 50%
        baseline_pipeline:
          type: string
          example: process-baseline-v1
        candidate_pipeline:
          type: string
          example: process-topk-v1
        duration:
          type: string
          example: 24h
        target_nodes:
          type: object
          properties:
            selector:
              type: object
              additionalProperties:
                type: string
              example:
                role: database
                environment: staging
        critical_processes:
          type: array
          items:
            type: string
          example: [postgres, pgbouncer, patroni]

    ExperimentDetails:
      allOf:
        - $ref: '#/components/schemas/Experiment'
        - type: object
          properties:
            metrics:
              type: object
              properties:
                baseline:
                  $ref: '#/components/schemas/MetricsSummary'
                candidate:
                  $ref: '#/components/schemas/MetricsSummary'
                reduction_percentage:
                  type: number
                  example: 75
                estimated_monthly_savings_usd:
                  type: number
                  example: 875

    MetricsSummary:
      type: object
      properties:
        cardinality:
          type: integer
          example: 50000
        ingestion_rate_dpm:
          type: integer
          example: 1000000
        critical_processes_retained:
          type: integer
          example: 25
        collector_cpu_cores:
          type: number
          example: 0.5
        collector_memory_mib:
          type: integer
          example: 256

    MetricsResponse:
      type: object
      properties:
        experiment_id:
          type: string
          example: exp-123
        time_range:
          type: object
          properties:
            start:
              type: string
              format: date-time
            end:
              type: string
              format: date-time
        series:
          type: object
          additionalProperties:
            type: array
            items:
              type: object
              properties:
                timestamp:
                  type: string
                  format: date-time
                value:
                  type: number

    Pipeline:
      type: object
      properties:
        name:
          type: string
          example: process-priority-filter-v1
        version:
          type: string
          example: 1.0.0
        description:
          type: string
          example: Filter by process priority
        type:
          type: string
          enum: [baseline, optimization]
          example: optimization
        expected_reduction:
          type: integer
          example: 60
        configurable_parameters:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: critical_processes
              type:
                type: string
                example: array[string]
              required:
                type: boolean
                example: true

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: INVALID_ARGUMENT
            message:
              type: string
              example: Pipeline name is required
            details:
              type: object
              additionalProperties: true

  responses:
    BadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'