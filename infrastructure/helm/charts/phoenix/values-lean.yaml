# Phoenix Lean Architecture Helm Values
# Simplified deployment with API + Agent architecture

global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

phoenix-api:
  enabled: true
  image:
    repository: phoenix/api
    tag: latest
    pullPolicy: Always
  
  replicaCount: 2
  
  service:
    type: ClusterIP
    port: 8080
  
  ingress:
    enabled: true
    className: nginx
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
    hosts:
      - host: phoenix-api.example.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: phoenix-api-tls
        hosts:
          - phoenix-api.example.com
  
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: 2000m
      memory: 2Gi
  
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  env:
    PORT: "8080"
    ENVIRONMENT: "production"
    PROMETHEUS_URL: "http://prometheus:9090"
    PUSHGATEWAY_URL: "http://prometheus-pushgateway:9091"
    FEATURE_LEAN_AGENTS: "true"
    FEATURE_K8S_MODE: "false"
    FEATURE_PUSHGATEWAY: "true"
  
  secrets:
    DATABASE_URL: "postgresql://phoenix:phoenix@postgres:5432/phoenix?sslmode=require"
    JWT_SECRET: "change-me-in-production"

phoenix-agent:
  enabled: true
  image:
    repository: phoenix/agent
    tag: latest
    pullPolicy: Always
  
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi
  
  env:
    POLL_INTERVAL: "15s"
    LOG_LEVEL: "info"
    CONFIG_DIR: "/etc/phoenix-agent"
  
  # Run on all nodes including control plane
  tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      operator: Exists
  
  priorityClassName: system-node-critical
  
  # Download OTel collector in init container
  otelCollector:
    version: "0.95.0"
    enabled: true

postgresql:
  enabled: true
  auth:
    postgresPassword: "phoenix"
    username: "phoenix"
    password: "phoenix"
    database: "phoenix"
  
  primary:
    persistence:
      enabled: true
      size: 50Gi
    
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        cpu: 2000m
        memory: 4Gi
  
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

prometheus:
  enabled: true
  
  server:
    retention: "7d"
    persistentVolume:
      enabled: true
      size: 100Gi
    
    resources:
      requests:
        cpu: 500m
        memory: 2Gi
      limits:
        cpu: 2000m
        memory: 8Gi
    
    service:
      type: ClusterIP
  
  pushgateway:
    enabled: true
    persistentVolume:
      enabled: true
      size: 10Gi
    
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 500m
        memory: 512Mi

grafana:
  enabled: true
  
  adminPassword: "phoenix"
  
  persistence:
    enabled: true
    size: 10Gi
  
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: Prometheus
        type: prometheus
        url: http://prometheus-server
        access: proxy
        isDefault: true
  
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'phoenix'
        orgId: 1
        folder: 'Phoenix'
        type: file
        disableDeletion: true
        editable: true
        options:
          path: /var/lib/grafana/dashboards/phoenix
  
  dashboardsConfigMaps:
    phoenix: "grafana-dashboards"

# Optional: External services
redis:
  enabled: false  # Can be enabled for caching

elasticsearch:
  enabled: false  # Can be enabled for log aggregation

# Network policies
networkPolicy:
  enabled: true
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: phoenix-system
    - from:
      - namespaceSelector:
          matchLabels:
            name: ingress-nginx

# Pod Security Policies
podSecurityPolicy:
  enabled: false  # Deprecated in K8s 1.25+

# Service Mesh integration (optional)
serviceMesh:
  enabled: false
  istio:
    injection: false