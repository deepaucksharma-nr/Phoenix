# Phoenix Production Override Configuration
# Use with: docker-compose -f docker-compose.yaml -f docker-compose.prod.yml up
# This provides production-grade security, resource limits, and configurations

version: '3.8'

services:
  # Main OpenTelemetry Collector - Production Settings
  otelcol-main:
    image: otel/opentelemetry-collector-contrib:0.103.1
    restart: always
    environment:
      - OTEL_LOG_LEVEL=info
      - OTELCOL_MAIN_MEMORY_LIMIT_MIB=4096
      - GOMAXPROCS=4
    volumes:
      - ./configs/production/otel_collector_main_prod.yaml:/etc/otelcol/config.yaml:ro
      - ./configs/production/tls:/etc/otel/tls:ro
      - ./configs/control:/etc/otelcol/control:ro
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4096M
        reservations:
          cpus: '2.0'
          memory: 2048M
    security_opt:
      - no-new-privileges:true
    healthcheck:
      interval: 30s
      timeout: 10s
      retries: 5

  # Observer Collector - Production Settings
  otelcol-observer:
    restart: always
    environment:
      - OTEL_LOG_LEVEL=info
      - OTELCOL_OBSERVER_MEMORY_LIMIT_MIB=1024
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1024M
        reservations:
          cpus: '1.0'
          memory: 512M

  # Control Actuator - Production Settings
  control-actuator-go:
    restart: always
    environment:
      - LOG_LEVEL=info
      - ADAPTIVE_CONTROLLER_INTERVAL_SECONDS=60
      - ADAPTIVE_CONTROLLER_STABILITY_SECONDS=300
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M

  # Anomaly Detector - Production Settings
  anomaly-detector:
    restart: always
    environment:
      - LOG_LEVEL=info
      - CHECK_INTERVAL_SECONDS=60
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M

  # Prometheus - Production Settings
  prometheus:
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=100GB'
      - '--web.enable-lifecycle'
      - '--log.level=info'
    volumes:
      - prometheus_prod_data:/prometheus
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8192M
        reservations:
          cpus: '2.0'
          memory: 4096M

  # Grafana - Production Settings
  grafana:
    restart: always
    environment:
      - GF_LOG_LEVEL=info
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PROD_PASSWORD}
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
    volumes:
      - grafana_prod_data:/var/lib/grafana
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2048M

  # Remove synthetic generator in production
  synthetic-metrics-generator:
    deploy:
      replicas: 0

# Production volumes with performance optimizations
volumes:
  prometheus_prod_data:
    driver: local
    driver_opts:
      type: none
      device: /data/prometheus
      o: bind
  
  grafana_prod_data:
    driver: local
    driver_opts:
      type: none
      device: /data/grafana
      o: bind

# Production network configuration
networks:
  phoenix:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-phoenix
    ipam:
      config:
        - subnet: 172.20.0.0/16
          ip_range: 172.20.240.0/20