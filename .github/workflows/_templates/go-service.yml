name: Go Service CI/CD

on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
      working-directory:
        required: true
        type: string
      run-integration-tests:
        required: false
        type: boolean
        default: true
      deploy-environments:
        required: false
        type: string
        default: 'development'
    secrets:
      DOCKER_REGISTRY_TOKEN:
        required: true
      SONAR_TOKEN:
        required: false
      CODECOV_TOKEN:
        required: false

env:
  GO_VERSION: '1.21'
  GOLANGCI_LINT_VERSION: 'v1.55.2'

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: |
            go.work.sum
            ${{ inputs.working-directory }}/go.sum

      - name: Verify dependencies
        run: |
          go mod verify
          go mod download

      - name: Validate structure
        run: |
          make validate

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: validate
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: |
            go.work.sum
            ${{ inputs.working-directory }}/go.sum

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          working-directory: ${{ inputs.working-directory }}
          args: --timeout=10m

      - name: Run go vet
        run: go vet ./...

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: validate
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    strategy:
      matrix:
        test-type: [unit, integration]
        exclude:
          - test-type: integration
            condition: ${{ !inputs.run-integration-tests }}
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: |
            go.work.sum
            ${{ inputs.working-directory }}/go.sum

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          go test -v -race -coverprofile=coverage.out -short ./...
          go tool cover -func=coverage.out

      - name: Run integration tests
        if: matrix.test-type == 'integration' && inputs.run-integration-tests
        env:
          DATABASE_URL: postgres://test:test@localhost:5432/test_db?sslmode=disable
          REDIS_URL: redis://localhost:6379
        run: |
          go test -v -race -coverprofile=coverage.out -run Integration ./...

      - name: Upload coverage
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.out
          flags: ${{ inputs.service-name }}
          name: ${{ inputs.service-name }}-coverage

      - name: SonarCloud Scan
        if: matrix.test-type == 'unit' && secrets.SONAR_TOKEN != ''
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out gosec-results.sarif ./...'

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ inputs.working-directory }}/gosec-results.sarif

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: ${{ inputs.working-directory }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results.sarif

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    outputs:
      version: ${{ steps.meta.outputs.version }}
      tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: |
            go.work.sum
            ${{ inputs.working-directory }}/go.sum

      - name: Build binary
        run: |
          make build
          ./bin/* version

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ inputs.service-name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.working-directory }}
          file: ${{ inputs.working-directory }}/build/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

      - name: Run Trivy on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository }}/${{ inputs.service-name }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'docker-trivy-results.sarif'

      - name: Upload Docker Trivy SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: docker-trivy-results.sarif

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        environment: ${{ fromJson(inputs.deploy-environments) }}
    environment:
      name: ${{ matrix.environment }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Kubernetes
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        if: matrix.environment != 'development'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name phoenix-${{ matrix.environment }}

      - name: Deploy to Kubernetes
        id: deploy
        run: |
          # Update image in Kubernetes manifests
          kubectl set image deployment/${{ inputs.service-name }} \
            ${{ inputs.service-name }}=ghcr.io/${{ github.repository }}/${{ inputs.service-name }}:${{ needs.build.outputs.version }} \
            -n phoenix-${{ matrix.environment }}
          
          # Wait for rollout
          kubectl rollout status deployment/${{ inputs.service-name }} \
            -n phoenix-${{ matrix.environment }} \
            --timeout=10m
          
          # Get service URL
          URL=$(kubectl get ingress ${{ inputs.service-name }} \
            -n phoenix-${{ matrix.environment }} \
            -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "url=https://$URL" >> $GITHUB_OUTPUT

      - name: Verify deployment
        run: |
          # Run smoke tests
          ./scripts/smoke-test.sh ${{ steps.deploy.outputs.url }}

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment of ${{ inputs.service-name }} to ${{ matrix.environment }} completed
            Version: ${{ needs.build.outputs.version }}
            URL: ${{ steps.deploy.outputs.url }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: always()