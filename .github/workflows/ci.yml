name: Phoenix CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  GO_VERSION: '1.18'
  NODE_VERSION: '18'
  GOLANGCI_LINT_VERSION: 'v1.55'
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_PREFIX: ${{ github.repository }}

jobs:
  # Validate mono-repo structure and governance
  validate-structure:
    name: Validate Structure & Configuration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Check required directories
        run: |
          # Check mono-repo structure
          required_dirs="phoenix-platform/cmd phoenix-platform/pkg phoenix-platform/docs"
          for dir in $required_dirs; do
            if [ ! -d "$dir" ]; then
              echo "❌ Missing required directory: $dir"
              exit 1
            fi
          done
          echo "✅ Mono-repo structure validated"
          
      - name: Check CODEOWNERS
        run: |
          if [ ! -f "CODEOWNERS" ]; then
            echo "❌ CODEOWNERS file missing"
            exit 1
          fi
          echo "✅ CODEOWNERS file present"
          
      - name: Validate YAML configurations
        run: |
          sudo apt-get update && sudo apt-get install -y yamllint
          yamllint -d relaxed configs/ || true
          
      - name: Validate Docker Compose
        run: |
          docker-compose config > /dev/null
          
      - name: Check configuration checksums
        run: |
          sha256sum -c CHECKSUMS.txt || echo "Warning: Checksum mismatch detected"

  # Lint Go code
  lint-go:
    name: Lint Go Code
    runs-on: ubuntu-latest
    needs: validate-structure
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
            
      - name: Install phoenix-platform dependencies
        working-directory: phoenix-platform
        run: go mod download
        
      - name: Run golangci-lint for phoenix-platform
        uses: golangci/golangci-lint-action@v3
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          working-directory: phoenix-platform
          args: --timeout=5m

  # Lint frontend code
  lint-frontend:
    name: Lint Frontend Code
    runs-on: ubuntu-latest
    needs: validate-structure
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: phoenix-platform/dashboard/package-lock.json
          
      - name: Install dependencies
        working-directory: phoenix-platform/dashboard
        run: npm ci
        
      - name: Run ESLint
        working-directory: phoenix-platform/dashboard
        run: npm run lint
        
      - name: Check formatting
        working-directory: phoenix-platform/dashboard
        run: npm run format:check

  # Test Go services (both legacy and phoenix-platform)
  test-go:
    name: Test Go Services
    runs-on: ubuntu-latest
    needs: lint-go
    strategy:
      matrix:
        workspace:
          - path: phoenix-platform
            services: postgres,redis
          - path: apps/synthetic-generator
            services: none
          - path: apps/control-actuator-go
            services: none
          - path: services/benchmark
            services: none
          - path: services/validator
            services: none
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: phoenix
          POSTGRES_PASSWORD: phoenix
          POSTGRES_DB: phoenix_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Run tests
        working-directory: ${{ matrix.workspace.path }}
        env:
          DATABASE_URL: postgres://phoenix:phoenix@localhost:5432/phoenix_test?sslmode=disable
          REDIS_URL: redis://localhost:6379
        run: |
          go mod download
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./${{ matrix.workspace.path }}/coverage.out
          flags: ${{ matrix.workspace.path }}
          name: codecov-umbrella

  # Run frontend tests
  test-frontend:
    name: Test Frontend Code
    runs-on: ubuntu-latest
    needs: lint-frontend
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: phoenix-platform/dashboard/package-lock.json
          
      - name: Install dependencies
        working-directory: phoenix-platform/dashboard
        run: npm ci
        
      - name: Run tests
        working-directory: phoenix-platform/dashboard
        run: npm test -- --coverage
        
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./phoenix-platform/dashboard/coverage/lcov.info
          flags: frontend
          name: codecov-umbrella

  # Integration tests
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [validate-structure, test-go]
    steps:
      - uses: actions/checkout@v4
      
      - name: Start Phoenix stack
        run: |
          ./scripts/initialize-environment.sh
          docker-compose up -d
          
      - name: Wait for services to be ready
        run: |
          timeout 300 bash -c 'until curl -f http://localhost:13133/health; do sleep 5; done'
          timeout 300 bash -c 'until curl -f http://localhost:9090/-/ready; do sleep 5; done'
          
      - name: Run integration tests
        run: |
          # Test metric ingestion
          curl -X POST http://localhost:4318/v1/metrics \
            -H "Content-Type: application/json" \
            -d '{"resourceMetrics":[{"resource":{"attributes":[{"key":"service.name","value":{"stringValue":"test"}}]},"scopeMetrics":[{"metrics":[{"name":"test.metric","gauge":{"dataPoints":[{"asInt":"100"}]}}]}]}]}'
          
          # Wait for metrics to propagate
          sleep 30
          
          # Verify metrics in Prometheus
          curl -s http://localhost:9090/api/v1/query?query=up | grep -q "success" || exit 1
          
      - name: Run benchmark smoke test
        run: |
          curl -X POST http://localhost:8083/benchmark/run \
            -H "Content-Type: application/json" \
            -d '{"scenario": "baseline_steady_state"}'
            
      - name: Collect logs on failure
        if: failure()
        run: |
          docker-compose logs > integration-test-logs.txt
          
      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-logs
          path: integration-test-logs.txt
          
      - name: Cleanup
        if: always()
        run: docker-compose down -v

  # Build artifacts and Docker images
  build:
    name: Build Artifacts & Docker Images
    runs-on: ubuntu-latest
    needs: [test-go, test-frontend, test-integration]
    strategy:
      matrix:
        include:
          - name: phoenix-platform
            context: phoenix-platform
            dockerfile: Dockerfile
          - name: otelcol-main
            context: services/collector
            dockerfile: Dockerfile
          - name: otelcol-observer
            context: services/collector
            dockerfile: Dockerfile
          - name: control-actuator-go
            context: apps/control-actuator-go
            dockerfile: Dockerfile
          - name: synthetic-generator
            context: apps/synthetic-generator
            dockerfile: Dockerfile
          - name: benchmark-controller
            context: services/benchmark
            dockerfile: Dockerfile
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Build Go services
        if: matrix.name == 'phoenix-platform'
        working-directory: phoenix-platform
        run: make build || echo "Build not available yet"
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.context }}/${{ matrix.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_PREFIX }}/${{ matrix.name }}:latest
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_PREFIX }}/${{ matrix.name }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate-structure
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'phoenix-platform'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run gosec security scanner
        uses: securego/gosec@master
        with:
          args: '-fmt sarif -out gosec-results.sarif ./phoenix-platform/...'
          
      - name: Upload gosec results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'gosec-results.sarif'

  # Performance testing
  performance-test:
    name: Performance Validation
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Update image references
        run: |
          sed -i "s|image: \(.*\):|image: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_PREFIX }}/\1:${{ github.sha }}|g" docker-compose.yaml
          
      - name: Start Phoenix with latest images
        run: |
          ./scripts/initialize-environment.sh
          docker-compose up -d
          
      - name: Run performance benchmark
        run: |
          # Wait for services
          timeout 300 bash -c 'until curl -f http://localhost:8083/health; do sleep 5; done'
          
          # Run baseline benchmark
          curl -X POST http://localhost:8083/benchmark/run \
            -H "Content-Type: application/json" \
            -d '{"scenario": "baseline_steady_state"}'
            
          # Wait for benchmark to complete (12 minutes total)
          sleep 720
          
          # Get results
          RESULTS=$(curl -s http://localhost:8083/benchmark/results)
          echo "$RESULTS" > benchmark-results.json
          
          # Check if benchmark passed
          echo "$RESULTS" | jq -e '.[0].passed' || (echo "Benchmark failed" && exit 1)
          
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results-${{ github.sha }}
          path: benchmark-results.json

  # Validate commit messages
  commitlint:
    name: Validate Commit Messages
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - uses: wagoid/commitlint-github-action@v5
        with:
          configFile: '.commitlintrc.yml'

  # Deploy to production
  deploy:
    name: Deploy to Environment
    runs-on: ubuntu-latest
    needs: [build, performance-test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Update Kubernetes manifests
        run: |
          sed -i "s|image: .*|image: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_PREFIX }}/otelcol-main:${{ github.sha }}|g" infrastructure/kubernetes/deployments/otel-collector.yaml || true
          sed -i "s|image: .*|image: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_PREFIX }}/control-actuator-go:${{ github.sha }}|g" infrastructure/kubernetes/deployments/control-actuator.yaml || true
          
      - name: Deploy to Kubernetes
        run: |
          aws eks update-kubeconfig --name phoenix-cluster || echo "Kubernetes deployment not configured"
          kubectl apply -f infrastructure/kubernetes/ || echo "Kubernetes manifests not ready"
          kubectl rollout status deployment/otel-collector -n phoenix || echo "Deployment status check skipped"
          kubectl rollout status deployment/control-actuator -n phoenix || echo "Deployment status check skipped"
