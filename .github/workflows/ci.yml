name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.filter.outputs.changes }}
      go-projects: ${{ steps.go-filter.outputs.projects }}
      node-projects: ${{ steps.node-filter.outputs.projects }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed projects
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            platform-api:
              - 'projects/platform-api/**'
              - 'pkg/**'
            control-plane:
              - 'projects/control-plane/**'
              - 'pkg/**'
            telemetry-collector:
              - 'projects/telemetry-collector/**'
              - 'pkg/**'
            experiment-controller:
              - 'projects/experiment-controller/**'
              - 'pkg/**'
            pipeline-operator:
              - 'projects/pipeline-operator/**'
              - 'pkg/**'
            analytics-engine:
              - 'projects/analytics-engine/**'
              - 'pkg/**'
            web-dashboard:
              - 'projects/web-dashboard/**'
            cli:
              - 'projects/cli/**'
              - 'pkg/**'
            sdk-go:
              - 'projects/sdk-go/**'
            shared:
              - 'pkg/**'
              - 'build/**'
              - '.github/**'

      - name: Detect Go projects
        id: go-filter
        run: |
          GO_PROJECTS=$(echo '${{ steps.filter.outputs.changes }}' | jq -r '.[] | select(. | IN("platform-api", "control-plane", "telemetry-collector", "experiment-controller", "pipeline-operator", "analytics-engine", "cli", "sdk-go"))')
          echo "projects=$GO_PROJECTS" >> $GITHUB_OUTPUT

      - name: Detect Node projects
        id: node-filter
        run: |
          NODE_PROJECTS=$(echo '${{ steps.filter.outputs.changes }}' | jq -r '.[] | select(. | IN("web-dashboard"))')
          echo "projects=$NODE_PROJECTS" >> $GITHUB_OUTPUT

  validate-structure:
    name: Validate Repository Structure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate structure
        run: |
          make validate

  lint-shared:
    name: Lint Shared Code
    runs-on: ubuntu-latest
    needs: detect-changes
    if: contains(needs.detect-changes.outputs.projects, 'shared')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: go.work.sum

      - name: Lint shared packages
        run: |
          cd pkg
          golangci-lint run

  test-shared:
    name: Test Shared Code
    runs-on: ubuntu-latest
    needs: detect-changes
    if: contains(needs.detect-changes.outputs.projects, 'shared')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: go.work.sum

      - name: Test shared packages
        run: |
          cd pkg
          go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./pkg/coverage.out
          flags: shared
          name: shared-coverage

  go-services:
    name: Go Service - ${{ matrix.project }}
    needs: detect-changes
    if: needs.detect-changes.outputs.go-projects != ''
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.detect-changes.outputs.go-projects) }}
    uses: ./.github/workflows/_templates/go-service.yml
    with:
      service-name: ${{ matrix.project }}
      working-directory: projects/${{ matrix.project }}
    secrets: inherit

  node-services:
    name: Node Service - ${{ matrix.project }}
    needs: detect-changes
    if: needs.detect-changes.outputs.node-projects != ''
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.detect-changes.outputs.node-projects) }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: projects/${{ matrix.project }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: projects/${{ matrix.project }}/pnpm-lock.yaml

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm lint

      - name: Type check
        run: pnpm typecheck

      - name: Test
        run: pnpm test:ci

      - name: Build
        run: pnpm build

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: ${{ matrix.project }}
          name: ${{ matrix.project }}-coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [go-services, node-services]
    if: always() && (needs.go-services.result == 'success' || needs.go-services.result == 'skipped') && (needs.node-services.result == 'success' || needs.node-services.result == 'skipped')
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: go.work.sum

      - name: Setup test environment
        run: |
          ./scripts/setup-test-env.sh

      - name: Run integration tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db?sslmode=disable
          REDIS_URL: redis://localhost:6379
        run: |
          make test-integration

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: tests/integration/results/

  all-checks-passed:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [validate-structure, lint-shared, test-shared, go-services, node-services, integration-tests]
    if: always()
    steps:
      - name: Check results
        run: |
          if [[ "${{ needs.validate-structure.result }}" != "success" ]] || \
             [[ "${{ needs.lint-shared.result }}" != "success" && "${{ needs.lint-shared.result }}" != "skipped" ]] || \
             [[ "${{ needs.test-shared.result }}" != "success" && "${{ needs.test-shared.result }}" != "skipped" ]] || \
             [[ "${{ needs.go-services.result }}" != "success" && "${{ needs.go-services.result }}" != "skipped" ]] || \
             [[ "${{ needs.node-services.result }}" != "success" && "${{ needs.node-services.result }}" != "skipped" ]] || \
             [[ "${{ needs.integration-tests.result }}" != "success" && "${{ needs.integration-tests.result }}" != "skipped" ]]; then
            echo "One or more checks failed"
            exit 1
          fi
          echo "All checks passed!"

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: all-checks-passed
    if: always() && github.event_name == 'push'
    steps:
      - name: Send notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.all-checks-passed.result }}
          text: |
            CI Build ${{ needs.all-checks-passed.result }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: always()