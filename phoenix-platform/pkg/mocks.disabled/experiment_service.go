// Code generated by mockery. DO NOT EDIT.
package mocks

import (
	"context"

	"github.com/stretchr/testify/mock"
	"github.com/phoenix/platform/pkg/interfaces"
)

// MockExperimentService is a mock implementation of ExperimentService
type MockExperimentService struct {
	mock.Mock
}

// CreateExperiment mocks the CreateExperiment method
func (m *MockExperimentService) CreateExperiment(ctx context.Context, req *interfaces.CreateExperimentRequest) (*interfaces.Experiment, error) {
	args := m.Called(ctx, req)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*interfaces.Experiment), args.Error(1)
}

// GetExperiment mocks the GetExperiment method
func (m *MockExperimentService) GetExperiment(ctx context.Context, id string) (*interfaces.Experiment, error) {
	args := m.Called(ctx, id)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*interfaces.Experiment), args.Error(1)
}

// UpdateExperiment mocks the UpdateExperiment method
func (m *MockExperimentService) UpdateExperiment(ctx context.Context, id string, req *interfaces.UpdateExperimentRequest) (*interfaces.Experiment, error) {
	args := m.Called(ctx, id, req)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*interfaces.Experiment), args.Error(1)
}

// DeleteExperiment mocks the DeleteExperiment method
func (m *MockExperimentService) DeleteExperiment(ctx context.Context, id string) error {
	args := m.Called(ctx, id)
	return args.Error(0)
}

// ListExperiments mocks the ListExperiments method
func (m *MockExperimentService) ListExperiments(ctx context.Context, filter *interfaces.ExperimentFilter) (*interfaces.ExperimentList, error) {
	args := m.Called(ctx, filter)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*interfaces.ExperimentList), args.Error(1)
}

// StartExperiment mocks the StartExperiment method
func (m *MockExperimentService) StartExperiment(ctx context.Context, id string) error {
	args := m.Called(ctx, id)
	return args.Error(0)
}

// StopExperiment mocks the StopExperiment method
func (m *MockExperimentService) StopExperiment(ctx context.Context, id string) error {
	args := m.Called(ctx, id)
	return args.Error(0)
}

// GetExperimentResults mocks the GetExperimentResults method
func (m *MockExperimentService) GetExperimentResults(ctx context.Context, id string) (*interfaces.ExperimentResults, error) {
	args := m.Called(ctx, id)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*interfaces.ExperimentResults), args.Error(1)
}

// PromoteExperiment mocks the PromoteExperiment method
func (m *MockExperimentService) PromoteExperiment(ctx context.Context, id string) error {
	args := m.Called(ctx, id)
	return args.Error(0)
}

// Ensure MockExperimentService implements ExperimentService
var _ interfaces.ExperimentService = (*MockExperimentService)(nil)

// MockExperimentStore is a mock implementation of ExperimentStore
type MockExperimentStore struct {
	mock.Mock
}

// CreateExperiment mocks the CreateExperiment method
func (m *MockExperimentStore) CreateExperiment(ctx context.Context, exp *interfaces.Experiment) error {
	args := m.Called(ctx, exp)
	return args.Error(0)
}

// GetExperiment mocks the GetExperiment method
func (m *MockExperimentStore) GetExperiment(ctx context.Context, id string) (*interfaces.Experiment, error) {
	args := m.Called(ctx, id)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*interfaces.Experiment), args.Error(1)
}

// UpdateExperiment mocks the UpdateExperiment method
func (m *MockExperimentStore) UpdateExperiment(ctx context.Context, exp *interfaces.Experiment) error {
	args := m.Called(ctx, exp)
	return args.Error(0)
}

// DeleteExperiment mocks the DeleteExperiment method
func (m *MockExperimentStore) DeleteExperiment(ctx context.Context, id string) error {
	args := m.Called(ctx, id)
	return args.Error(0)
}

// ListExperiments mocks the ListExperiments method
func (m *MockExperimentStore) ListExperiments(ctx context.Context, filter *interfaces.ExperimentFilter) ([]*interfaces.Experiment, error) {
	args := m.Called(ctx, filter)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*interfaces.Experiment), args.Error(1)
}

// UpdateExperimentState mocks the UpdateExperimentState method
func (m *MockExperimentStore) UpdateExperimentState(ctx context.Context, id string, state interfaces.ExperimentState) error {
	args := m.Called(ctx, id, state)
	return args.Error(0)
}

// GetExperimentsByState mocks the GetExperimentsByState method
func (m *MockExperimentStore) GetExperimentsByState(ctx context.Context, state interfaces.ExperimentState) ([]*interfaces.Experiment, error) {
	args := m.Called(ctx, state)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*interfaces.Experiment), args.Error(1)
}

// Ensure MockExperimentStore implements ExperimentStore
var _ interfaces.ExperimentStore = (*MockExperimentStore)(nil)