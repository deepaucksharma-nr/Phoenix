version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: phoenix-postgres
    environment:
      POSTGRES_USER: phoenix
      POSTGRES_PASSWORD: phoenix
      POSTGRES_DB: phoenix
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U phoenix"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: phoenix-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: phoenix-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/monitoring/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: phoenix-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - ./configs/monitoring/grafana/grafana-datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yml:ro
      - ./configs/monitoring/grafana/dashboards_provider.yaml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
      - ./configs/monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

  # Experiment Controller Service
  experiment-controller:
    build:
      context: .
      dockerfile: docker/controller/Dockerfile
    container_name: phoenix-experiment-controller
    environment:
      ENVIRONMENT: development
      DATABASE_URL: postgres://phoenix:phoenix@postgres:5432/phoenix?sslmode=disable
      GRPC_PORT: :50051
      METRICS_PORT: :8081
      GENERATOR_ENDPOINT: config-generator:50052
    ports:
      - "50051:50051"  # gRPC
      - "8081:8081"    # Metrics/Health
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Config Generator Service
  config-generator:
    build:
      context: .
      dockerfile: docker/generator/Dockerfile
    container_name: phoenix-config-generator
    environment:
      ENVIRONMENT: development
      HTTP_PORT: :8082
      GRPC_PORT: :50052
      GIT_REPO_URL: https://github.com/phoenix/configs
      GIT_TOKEN: ${GIT_TOKEN:-}
    ports:
      - "50052:50052"  # gRPC
      - "8082:8082"    # HTTP/Metrics
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Control Service
  control-service:
    build:
      context: .
      dockerfile: cmd/control-service/Dockerfile
    container_name: phoenix-control-service
    environment:
      ENVIRONMENT: development
      GRPC_PORT: :50053
      METRICS_PORT: :8083
    ports:
      - "50053:50053"  # gRPC
      - "8083:8083"    # Metrics/Health
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: cmd/api-gateway/Dockerfile
    container_name: phoenix-api-gateway
    environment:
      ENVIRONMENT: development
      HTTP_PORT: :8080
      EXPERIMENT_ADDR: experiment-controller:50051
      GENERATOR_ADDR: config-generator:50052
      CONTROLLER_ADDR: control-service:50053
    ports:
      - "8080:8080"
    depends_on:
      - experiment-controller
      - config-generator
      - control-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Dashboard (React app)
  dashboard:
    build:
      context: dashboard
      dockerfile: ../docker/dashboard/Dockerfile
      target: development
    container_name: phoenix-dashboard
    environment:
      VITE_API_URL: http://localhost:8080
    ports:
      - "5173:5173"  # Vite dev server
    volumes:
      - ./dashboard:/app
      - /app/node_modules  # Prevent overwriting node_modules
    depends_on:
      - api-gateway
    command: npm run dev -- --host

  # Process Simulator (for testing)
  process-simulator:
    build:
      context: .
      dockerfile: docker/simulator/Dockerfile
    container_name: phoenix-process-simulator
    environment:
      ENVIRONMENT: development
      METRICS_ENDPOINT: http://prometheus:9090/api/v1/write
      SIMULATION_MODE: continuous
    depends_on:
      - prometheus

  # NATS (for future event bus)
  nats:
    image: nats:latest
    container_name: phoenix-nats
    ports:
      - "4222:4222"  # Client connections
      - "8222:8222"  # Monitoring
    command: "-js -m 8222"  # Enable JetStream
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "4222"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: phoenix-network